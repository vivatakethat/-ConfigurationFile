!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/435bffb9/
%	vim_configurationfile/.vim/plugged/gocode/debian/rules	/^%:$/;"	t
)	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^    cnoremap <expr> ) <SID>inputclose()$/;"	m
-debug for special server-side debug mode	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# -debug for special server-side debug mode$/;"	c
-s for "server"	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# -s for "server"$/;"	c
0	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	noremap <silent> <buffer> 0 :call <SID>quickmenu_close()<cr>$/;"	m
1. `<Plug>` mappings (interactive mode)	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### 1. `<Plug>` mappings (interactive mode)$/;"	t
2. Using `:EasyAlign` command	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### 2. Using `:EasyAlign` command$/;"	t
:EasyAlign command	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### :EasyAlign command$/;"	S
:EasyAlign=	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#   :EasyAlign=$/;"	c
:EasyAlign=id	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#   :EasyAlign=id$/;"	c
:EasyAlign=in	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#   :EasyAlign=in$/;"	c
:EasyAlign=is	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#   :EasyAlign=is$/;"	c
<CR>	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	noremap <silent> <buffer> <CR> :call <SID>quickmenu_enter()<cr>$/;"	m
<F11>	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	imap <expr> <F11> quickmenu#bottom(0)$/;"	m
<Plug>(EasyAlign)	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(EasyAlign) :set opfunc=<SID>easy_align_op<Enter>g@$/;"	m
<Plug>(EasyAlign)	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^vnoremap <silent> <Plug>(EasyAlign) :<C-U>call <SID>easy_align_op(visualmode(), 1)<Enter>$/;"	m
<Plug>(EasyAlignOperator)	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(EasyAlignOperator) :set opfunc=<SID>easy_align_op<Enter>g@$/;"	m
<Plug>(EasyAlignRepeat)	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(EasyAlignRepeat) :call <SID>easy_align_repeat()<Enter>$/;"	m
<Plug>(EasyAlignRepeat)	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^vnoremap <silent> <Plug>(EasyAlignRepeat) :<C-U>call <SID>repeat_in_visual()<Enter>$/;"	m
<Plug>(LiveEasyAlign)	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(LiveEasyAlign) :set opfunc=<SID>live_easy_align_op<Enter>g@$/;"	m
<Plug>(LiveEasyAlign)	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^vnoremap <silent> <Plug>(LiveEasyAlign) :<C-U>call <SID>live_easy_align_op(visualmode(), 1)<Ente/;"	m
<Plug><cfile>	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  cmap <buffer><script><expr> <Plug><cfile> substitute(fireplace#cfile(),'^$',"\\022\\006",'')$/;"	m
<Plug><cpath>	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  cmap <buffer><script><expr> <Plug><cpath> <SID>Find('','')$/;"	m
<Plug>Fireplace1MacroExpand	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>Fireplace1MacroExpand :<C-U>set opfunc=<SID>macroexpand1op<CR>g@$/;"	m
<Plug>Fireplace1MacroExpand	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^xnoremap <silent> <Plug>Fireplace1MacroExpand :<C-U>call <SID>macroexpand1op(visualmode())<CR>$/;"	m
<Plug>FireplaceCount1MacroExpand	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCount1MacroExpand :<C-U>call <SID>macroexpand1op(v:count)<CR>$/;"	m
<Plug>FireplaceCountEdit	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountEdit :<C-U>call <SID>editop(v:count)<CR>$/;"	m
<Plug>FireplaceCountFilter	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountFilter :<C-U>call <SID>filterop(v:count)<CR>$/;"	m
<Plug>FireplaceCountMacroExpand	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountMacroExpand  :<C-U>call <SID>macroexpandop(v:count)<CR>$/;"	m
<Plug>FireplaceCountPrint	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceCountPrint  :<C-U>call <SID>printop(v:count)<CR>$/;"	m
<Plug>FireplaceDjump	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceDjump :<C-U>exe <SID>Edit('edit', expand('<cword>'))<CR>$/;"	m
<Plug>FireplaceDsplit	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceDsplit :<C-U>exe <SID>Edit('split', expand('<cword>'))<CR>$/;"	m
<Plug>FireplaceDtabjump	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceDtabjump :<C-U>exe <SID>Edit('tabedit', expand('<cword>'))<CR>$/;"	m
<Plug>FireplaceEdit	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceEdit   :<C-U>set opfunc=<SID>editop<CR>g@$/;"	m
<Plug>FireplaceEdit	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^xnoremap <silent> <Plug>FireplaceEdit   :<C-U>call <SID>editop(visualmode())<CR>$/;"	m
<Plug>FireplaceEditFile	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceEditFile    :<C-U>exe <SID>Find('find','edit')<CR>$/;"	m
<Plug>FireplaceFilter	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceFilter :<C-U>set opfunc=<SID>filterop<CR>g@$/;"	m
<Plug>FireplaceFilter	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^xnoremap <silent> <Plug>FireplaceFilter :<C-U>call <SID>filterop(visualmode())<CR>$/;"	m
<Plug>FireplaceK	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <Plug>FireplaceK :<C-R>=<SID>K()<CR><CR>$/;"	m
<Plug>FireplaceMacroExpand	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceMacroExpand  :<C-U>set opfunc=<SID>macroexpandop<CR>g@$/;"	m
<Plug>FireplaceMacroExpand	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^xnoremap <silent> <Plug>FireplaceMacroExpand  :<C-U>call <SID>macroexpandop(visualmode())<CR>$/;"	m
<Plug>FireplacePrint	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplacePrint  :<C-U>set opfunc=<SID>printop<CR>g@$/;"	m
<Plug>FireplacePrint	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^xnoremap <silent> <Plug>FireplacePrint  :<C-U>call <SID>printop(visualmode())<CR>$/;"	m
<Plug>FireplacePrintLast	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplacePrintLast :exe <SID>print_last()<CR>$/;"	m
<Plug>FireplacePrompt	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap          <Plug>FireplacePrompt :exe <SID>inputeval()<CR>$/;"	m
<Plug>FireplaceRecall	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^noremap!          <Plug>FireplaceRecall <C-R>=<SID>recall()<CR>$/;"	m
<Plug>FireplaceSource	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <Plug>FireplaceSource :Source <C-R><C-W><CR>$/;"	m
<Plug>FireplaceSplitFile	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceSplitFile   :<C-U>exe <SID>Find('sfind','split')<CR>$/;"	m
<Plug>FireplaceTabeditFile	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^nnoremap <silent> <Plug>FireplaceTabeditFile :<C-U>exe <SID>Find('tabfind','tabedit')<CR>$/;"	m
<cr>	vim_configurationfile/.vim/autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    nnoremap <silent> <buffer> <cr> :call nerdtree#ui_glue#invokeKeyMap(g:NERDTreeMapActivateNod/;"	m
<plug>(plug-preview)	vim_configurationfile/.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
A	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^func A() localos.Error {$/;"	f	package:main	typeref:typename:localos.Error
A	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^func A() localos.Error {$/;"	f	package:main	typeref:typename:localos.Error
A	vim_configurationfile/.vim/plugged/gocode/_testing/test.0026/test.go.in	/^var A = struct { a, b, c int }{1,2,3}$/;"	v	package:main
A	vim_configurationfile/.vim/plugged/gocode/_testing/test.0030/test.go.in	/^type A struct {$/;"	s	package:main
Add new items into menu	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### Add new items into menu$/;"	t
Adjusting indentation	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Adjusting indentation$/;"	S
Advanced examples and use cases	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Advanced examples and use cases$/;"	s
Aligning C-style variable definition	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Aligning C-style variable definition$/;"	s
Aligning delimiters of different lengths	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Aligning delimiters of different lengths$/;"	S
Aligning in-line comments	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Aligning in-line comments$/;"	s
Aligning table cells	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Aligning table cells$/;"	S
Alignment around =	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Alignment around =$/;"	s
Alignment around whitespaces	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Alignment around whitespaces$/;"	s
Alignment options	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Alignment options$/;"	s
Alignment options in interactive mode	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### Alignment options in interactive mode$/;"	t
Alignments over multiple occurrences of delimiters	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Alignments over multiple occurrences of delimiters$/;"	S
An autocompletion daemon for the Go programming language	vim_configurationfile/.vim/plugged/gocode/README.md	/^## An autocompletion daemon for the Go programming language$/;"	s
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 []byte$/;"	m	struct:main.Args_auto_complete	typeref:typename:[]byte
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 []byte$/;"	m	struct:main.Args_cursor_type_pkg	typeref:typename:[]byte
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 []candidate$/;"	m	struct:main.Reply_auto_complete	typeref:typename:[]candidate
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 int$/;"	m	struct:main.Args_close	typeref:typename:int
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 int$/;"	m	struct:main.Args_drop_cache	typeref:typename:int
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 int$/;"	m	struct:main.Args_status	typeref:typename:int
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 int$/;"	m	struct:main.Reply_close	typeref:typename:int
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 int$/;"	m	struct:main.Reply_drop_cache	typeref:typename:int
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 string$/;"	m	struct:main.Reply_set	typeref:typename:string
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0 string$/;"	m	struct:main.Reply_status	typeref:typename:string
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0, Arg1 string$/;"	m	struct:main.Args_set	typeref:typename:string
Arg0	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0, Arg1 string$/;"	m	struct:main.Reply_cursor_type_pkg	typeref:typename:string
Arg1	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0, Arg1 string$/;"	m	struct:main.Args_set	typeref:typename:string
Arg1	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg0, Arg1 string$/;"	m	struct:main.Reply_cursor_type_pkg	typeref:typename:string
Arg1	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg1 int$/;"	m	struct:main.Reply_auto_complete	typeref:typename:int
Arg1	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg1 string$/;"	m	struct:main.Args_auto_complete	typeref:typename:string
Arg1	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg1 string$/;"	m	struct:main.Args_cursor_type_pkg	typeref:typename:string
Arg2	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg2 int$/;"	m	struct:main.Args_auto_complete	typeref:typename:int
Arg2	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg2 int$/;"	m	struct:main.Args_cursor_type_pkg	typeref:typename:int
Arg3	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^	Arg3 go_build_context$/;"	m	struct:main.Args_auto_complete	typeref:typename:go_build_context
Args_auto_complete	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Args_auto_complete struct {$/;"	s	package:main
Args_close	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Args_close struct {$/;"	s	package:main
Args_cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Args_cursor_type_pkg struct {$/;"	s	package:main
Args_drop_cache	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Args_drop_cache struct {$/;"	s	package:main
Args_set	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Args_set struct {$/;"	s	package:main
Args_status	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Args_status struct {$/;"	s	package:main
Array	vim_configurationfile/.vim/plugged/gocode/_testing/test.0037/test.go.in	/^type Array [5]int$/;"	t	package:main	typeref:typename:[5]int
Author	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Author$/;"	s
Autobuild	vim_configurationfile/.vim/plugged/gocode/config.go	/^	Autobuild        bool   `json:"autobuild"`$/;"	m	struct:main.config	typeref:typename:bool
B	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/b.go	/^func B() superos.Error {$/;"	f	package:main	typeref:typename:superos.Error
B	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/b.go	/^func B() superos.Error {$/;"	f	package:main	typeref:typename:superos.Error
B	vim_configurationfile/.vim/plugged/gocode/_testing/test.0026/test.go.in	/^var B struct { d, e, f int }$/;"	v	package:main	typeref:typename:struct { d, e, f int }
B	vim_configurationfile/.vim/plugged/gocode/_testing/test.0030/test.go.in	/^type B A$/;"	t	package:main	typeref:typename:A
Bar	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^type Bar struct {$/;"	s	package:main
Bar	vim_configurationfile/.vim/plugged/gocode/_testing/test.0040/test.go.in	/^func (f *Foo) Bar() {}$/;"	f	struct:main.Foo
Bark	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^func (d *Dog) Bark() {$/;"	f	struct:main.Dog
Bookmark	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
BuildTags	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	BuildTags     []string$/;"	m	struct:main.go_build_context	typeref:typename:[]string
By default gocode interprets offset as bytes offset, but 'c' or 'C' prefix means that offset is unicode code points offset	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# By default gocode interprets offset as bytes offset, but 'c' or 'C' prefix means that offset i/;"	c
CCGenerateConfig	vim_configurationfile/.vim/plugged/YCM-Generator/plugin/ycm-generator.vim	/^command! -nargs=? -complete=file_in_path -bang CCGenerateConfig call s:GenerateConfig("cc", <ban/;"	c
CSCOPE_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -R$/;"	v
CSCOPE_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -i %TAGS_FILE%.files$/;"	v
CSCOPE_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_EXE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CgoEnabled	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	CgoEnabled    bool$/;"	m	struct:main.go_build_context	typeref:typename:bool
Class	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	Class decl_class$/;"	m	struct:main.candidate	typeref:typename:decl_class
Clear items	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### Clear items$/;"	t
ClearAllBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
Code Completion Assistance	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^## Code Completion Assistance ##$/;"	s
Color customization	vim_configurationfile/.vim/plugged/gocode/emacs-company/README.md	/^### Color customization$/;"	S
Commas	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Commas$/;"	s
Company-go	vim_configurationfile/.vim/plugged/gocode/emacs-company/README.md	/^# Company-go$/;"	c
Compiler	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	Compiler      string$/;"	m	struct:main.go_build_context	typeref:typename:string
Connection	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^class Connection:$/;"	c
Contributing	vim_configurationfile/.vim/plugged/vim-fireplace/CONTRIBUTING.markdown	/^## Contributing$/;"	s
Contributing	vim_configurationfile/.vim/plugged/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Credits	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## Credits$/;"	s
Current Result	vim_configurationfile/.vim/plugged/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Current Result$/;"	S
Cursor at: 52	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^Cursor at: 52$/;"	s
D	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DB_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
Debugging	vim_configurationfile/.vim/plugged/gocode/README.md	/^### Debugging$/;"	S
Default: _k_eep the original indentation	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^# Default: _k_eep the original indentation$/;"	c
Demo	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Demo$/;"	s
Description of Completion Assistance Formats	vim_configurationfile/.vim/plugged/gocode/docs/autocomplete_formats.md	/^# Description of Completion Assistance Formats #$/;"	c
Developing	vim_configurationfile/.vim/plugged/gocode/README.md	/^### Developing$/;"	S
Development	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^## Development$/;"	s
Different ways to start	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Different ways to start$/;"	S
DirectoryOfThisScript	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^def DirectoryOfThisScript():$/;"	f
Disabling &foldmethod during alignment	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Disabling &foldmethod during alignment$/;"	S
Djump	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -bar -buffer -nargs=1 -complete=customlist,fireplace#eval_complete Djump  :exe s:Edit/;"	c
Doc	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -bar -nargs=1 -complete=customlist,fireplace#eval_complete Doc     :exe s:Doc/;"	c
Documentation	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## Documentation$/;"	s
Documentation & Support	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^## Documentation & Support$/;"	s
Dog	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^type Dog struct {$/;"	s	package:main
DoneParseArgs	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Dsplit	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -bar -buffer -nargs=1 -complete=customlist,fireplace#eval_complete Dsplit :exe s:Edit/;"	c
Dummy	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^	Dummy$/;"	M	struct:main.Bar	typeref:typename:Dummy
Dummy	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^type Dummy struct {$/;"	s	package:main
Dummy	vim_configurationfile/.vim/plugged/gocode/_testing/test.0033/test.go.in	/^type Dummy struct {$/;"	s	package:main
EOF	vim_configurationfile/.vim/plugged/vim-easy-align/test/run	/^vim -Nu <(cat << EOF$/;"	h
EXPECTED	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^EXPECTED = YELLOW + "EXPECTED: " + NC$/;"	v
EasyAlign	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^command! -nargs=* -range -bang EasyAlign <line1>,<line2>call easy_align#align(<bang>0, 0, 'comma/;"	c
EditBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 EditBookmarks call g:NERDTreeBookmark.Edit()$/;"	c
Emacs setup	vim_configurationfile/.vim/plugged/gocode/README.md	/^### Emacs setup$/;"	S
Environment	vim_configurationfile/.vim/plugged/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Environment$/;"	S
Eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -bang -range=0 -nargs=? -complete=customlist,fireplace#eval_complete Eval :ex/;"	c
Evaluating from the buffer	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^### Evaluating from the buffer$/;"	S
Example	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## Example$/;"	s
Example	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^### Example$/;"	S
Examples	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### Examples$/;"	t
Examples using predefined rules	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### Examples using predefined rules$/;"	t
Expected Result	vim_configurationfile/.vim/plugged/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Expected Result$/;"	S
Extending alignment rules	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Extending alignment rules$/;"	S
F.A.Q.	vim_configurationfile/.vim/plugged/nerdtree/README.markdown	/^F.A.Q.$/;"	s
F1	vim_configurationfile/.vim/plugged/gocode/_testing/test.0030/test.go.in	/^	F1, F2, F3 int$/;"	m	struct:main.A	typeref:typename:int
F2	vim_configurationfile/.vim/plugged/gocode/_testing/test.0030/test.go.in	/^	F1, F2, F3 int$/;"	m	struct:main.A	typeref:typename:int
F3	vim_configurationfile/.vim/plugged/gocode/_testing/test.0030/test.go.in	/^	F1, F2, F3 int$/;"	m	struct:main.A	typeref:typename:int
FAIL	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^FAIL = RED + "FAIL!" + NC$/;"	v
FAQ	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^## FAQ$/;"	s
FILE_LIST_CMD	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
Features	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^## Features$/;"	s
Filtering lines	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Filtering lines$/;"	S
FindDoc	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -nargs=1 FindDoc :exe s:Lookup(s:repl_ns(), 'find-doc', printf('#"%s"', <q-ar/;"	c
FireplaceConnect	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^command! -bar -complete=customlist,s:connect_complete -nargs=* FireplaceConnect :exe s:Connect(</;"	c
FlagsForFile	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
Flow of execution	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Flow of execution$/;"	S
Foo	vim_configurationfile/.vim/plugged/gocode/_testing/test.0040/test.go.in	/^type Foo struct {}$/;"	s	package:main
ForceDebugOutput	vim_configurationfile/.vim/plugged/gocode/config.go	/^	ForceDebugOutput string `json:"force-debug-output"`$/;"	m	struct:main.config	typeref:typename:string
Formatting YAML (or JSON)	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Formatting YAML (or JSON)$/;"	s
Formatting multi-line method chaining	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Formatting multi-line method chaining$/;"	s
Formatting table	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Formatting table$/;"	s
GOARCH	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	GOARCH        string$/;"	m	struct:main.go_build_context	typeref:typename:string
GOOS	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	GOOS          string$/;"	m	struct:main.go_build_context	typeref:typename:string
GOPATH	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	GOPATH        string$/;"	m	struct:main.go_build_context	typeref:typename:string
GOROOT	vim_configurationfile/.vim/plugged/gocode/debian/rules	/^export GOROOT=\/usr\/lib\/go$/;"	m
GOROOT	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	GOROOT        string$/;"	m	struct:main.go_build_context	typeref:typename:string
GREEN	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^GREEN = "\\033[0;32m"$/;"	v
GetCompilationInfoForFile	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
GetMe	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^func (t *Test) GetMe() *Test {$/;"	f	struct:main.Test	typeref:typename:*Test
Gutentags	vim_configurationfile/.vim/plugged/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
HighLink	vim_configurationfile/.vim/plugged/quickmenu.vim/syntax/quickmenu.vim	/^command! -nargs=* HighLink call s:hllink(<f-args>)$/;"	c
History	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## History$/;"	s
How?	vim_configurationfile/.vim/plugged/vim-gutentags/README.md	/^## How?$/;"	s
IDE Integration Guide	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# IDE Integration Guide #$/;"	c
INDEX_WHOLE_PROJECT	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Ignoring delimiters in comments or strings	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Ignoring delimiters in comments or strings$/;"	s
Ignoring delimiters in comments or strings	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Ignoring delimiters in comments or strings$/;"	S
Ignoring unmatched lines	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Ignoring unmatched lines$/;"	S
Indentation: _n_one	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^# Indentation: _n_one$/;"	c
Install	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## Install$/;"	s
InstallSuffix	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	InstallSuffix string$/;"	m	struct:main.go_build_context	typeref:typename:string
Installation	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^## Installation$/;"	s
Installation	vim_configurationfile/.vim/plugged/nerdtree/README.markdown	/^Installation$/;"	s
Installation	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Installation$/;"	s
Installation	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^## Installation$/;"	s
Interactive mode	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Interactive mode$/;"	S
Introduction	vim_configurationfile/.vim/plugged/nerdtree/README.markdown	/^Introduction$/;"	s
IsHeaderFile	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^def IsHeaderFile( filename ):$/;"	f
Javadoc	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -bar -nargs=1 Javadoc :exe s:Lookup('clojure.java.javadoc', 'javadoc', <q-arg/;"	c
L	vim_configurationfile/.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	vim_configurationfile/.vim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
LOG_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Last	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -bang -bar -count=1 Last exe s:Last(<bang>0, <count>)$/;"	c
Left/right/center mode switch in interactive mode	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Left\/right\/center mode switch in interactive mode$/;"	S
Legs	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^	Legs int$/;"	m	struct:main.Dog	typeref:typename:int
Len	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (b *out_buffers) Len() int {$/;"	f	struct:main.out_buffers	typeref:typename:int
Len	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (s decl_slice) Len() int      { return len(s) }$/;"	f	type:main.decl_slice	typeref:typename:int
Less	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (b *out_buffers) Less(i, j int) bool {$/;"	f	struct:main.out_buffers	typeref:typename:bool
Less	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (s decl_slice) Less(i, j int) bool {$/;"	f	type:main.decl_slice	typeref:typename:bool
LibPath	vim_configurationfile/.vim/plugged/gocode/config.go	/^	LibPath          string `json:"lib-path"`$/;"	m	struct:main.config	typeref:typename:string
License	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^## License$/;"	s
License	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^License$/;"	s
License	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^## License$/;"	s
Lines with different indentation	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^# Lines with different indentation$/;"	c
List of options	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### List of options$/;"	S
Literal	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (i token_item) Literal() string {$/;"	f	struct:main.token_item	typeref:typename:string
Live interactive mode	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### Live interactive mode$/;"	t
LiveEasyAlign	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^command! -nargs=* -range -bang LiveEasyAlign <line1>,<line2>call easy_align#align(<bang>0, 1, 'c/;"	c
Lock	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^func (b *Bar) Lock() {$/;"	f	struct:main.Bar
LoopParseArgs	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
MakeRelativePathsInFlagsAbsolute	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
Manual installation	vim_configurationfile/.vim/plugged/gocode/README.md	/^#### Manual installation$/;"	t
Misc	vim_configurationfile/.vim/plugged/gocode/README.md	/^### Misc$/;"	S
More	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## More$/;"	s
MoreTests	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^	MoreTests map[string][]**Dog$/;"	m	struct:main.Test	typeref:typename:map[string][]**Dog
Mutex	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^	sync.Mutex$/;"	M	struct:main.Dummy	typeref:typename:sync.Mutex
Mutex	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	sync.Mutex$/;"	M	struct:main.anonymous_id_gen	typeref:typename:sync.Mutex
Mutex	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	sync.Mutex$/;"	M	struct:main.decl_cache	typeref:typename:sync.Mutex
MyMap	vim_configurationfile/.vim/plugged/gocode/_testing/test.0012/test.go.in	/^type MyMap map[string]int$/;"	t	package:main	typeref:typename:map[string]int
MyPtrInt	vim_configurationfile/.vim/plugged/gocode/_testing/test.0014/test.go.in	/^type MyPtrInt *int$/;"	t	package:main	typeref:typename:*int
NC	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^NC = "\\033[0m"$/;"	v
NERDTree	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTreeAddKeyMap	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeClose	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeFind	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRefreshRoot	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeRefreshRoot call s:refreshRoot()$/;"	c
NERDTreeRender	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeToggle	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NERDTreeVCS	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
Name	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	Name  string$/;"	m	struct:main.candidate	typeref:typename:string
Navigating and Comprehending	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^### Navigating and Comprehending$/;"	S
Not quite a REPL	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^### Not quite a REPL$/;"	S
OK	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^OK = GREEN + "PASS!" + NC$/;"	v
Omnicomplete	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^### Omnicomplete$/;"	S
Only use company-mode with company-go in go-mode	vim_configurationfile/.vim/plugged/gocode/emacs-company/README.md	/^### Only use company-mode with company-go in go-mode$/;"	S
OpenBookmark	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
Options	vim_configurationfile/.vim/plugged/gocode/README.md	/^### Options$/;"	S
Options	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## Options$/;"	s
Other	vim_configurationfile/.vim/plugged/gocode/README.md	/^#### Other$/;"	t
Other options	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Other options$/;"	s
PAUSE_BEFORE_EXIT	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
ParseArgs	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
Partial alignment in blockwise-visual mode	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Partial alignment in blockwise-visual mode$/;"	S
Plug	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	vim_configurationfile/.vim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	vim_configurationfile/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Popup quickmenu on the bottom (cmdline)	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### Popup quickmenu on the bottom (cmdline)$/;"	t
Possible Fix	vim_configurationfile/.vim/plugged/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Possible Fix$/;"	S
Possible improvements	vim_configurationfile/.vim/plugged/gocode/emacs-company/README.md	/^## Possible improvements$/;"	s
PowerOfTwo	vim_configurationfile/.vim/plugged/gocode/_testing/test.0028/test.go.in	/^func (x X) PowerOfTwo() int {$/;"	f	type:main.X	typeref:typename:int
Preface	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## Preface$/;"	s
Prerequisite	vim_configurationfile/.vim/plugged/vim-easy-align/test/README.md	/^### Prerequisite$/;"	S
PrettyPrintTypeExpr	vim_configurationfile/.vim/plugged/gocode/_testing/test.0003/test.go.in	/^func PrettyPrintTypeExpr(out io.Writer, e ast.Expr) {$/;"	f	package:main
PrettyPrintTypeExpr	vim_configurationfile/.vim/plugged/gocode/_testing/test.0004/test.go.in	/^func PrettyPrintTypeExpr(out io.Writer, e ast.Expr) {$/;"	f	package:main
Process	vim_configurationfile/.vim/plugged/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Process$/;"	S
ProposeBuiltins	vim_configurationfile/.vim/plugged/gocode/config.go	/^	ProposeBuiltins  bool   `json:"propose-builtins"`$/;"	m	struct:main.config	typeref:typename:bool
Pushing	vim_configurationfile/.vim/plugged/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s
Quick start guide	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Quick start guide$/;"	s
R	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
RED	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^RED = "\\033[0;31m"$/;"	v
RPC	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type RPC struct {$/;"	s	package:main
RPC_auto_complete	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func (r *RPC) RPC_auto_complete(args *Args_auto_complete, reply *Reply_auto_complete) error {$/;"	f	struct:main.RPC	typeref:typename:error
RPC_close	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func (r *RPC) RPC_close(args *Args_close, reply *Reply_close) error {$/;"	f	struct:main.RPC	typeref:typename:error
RPC_cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func (r *RPC) RPC_cursor_type_pkg(args *Args_cursor_type_pkg, reply *Reply_cursor_type_pkg) erro/;"	f	struct:main.RPC	typeref:typename:error
RPC_drop_cache	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func (r *RPC) RPC_drop_cache(args *Args_drop_cache, reply *Reply_drop_cache) error {$/;"	f	struct:main.RPC	typeref:typename:error
RPC_set	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func (r *RPC) RPC_set(args *Args_set, reply *Reply_set) error {$/;"	f	struct:main.RPC	typeref:typename:error
RPC_status	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func (r *RPC) RPC_status(args *Args_status, reply *Reply_status) error {$/;"	f	struct:main.RPC	typeref:typename:error
Read source from file and show completions for character at offset 449 from beginning	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# Read source from file and show completions for character at offset 449 from beginning$/;"	c
Read source from stdin (more suitable for editor since it keeps unsaved file copy in memory)	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# Read source from stdin (more suitable for editor since it keeps unsaved file copy in memory)$/;"	c
ReadBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
Regular expression vs. predefined rules	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Regular expression vs. predefined rules$/;"	S
Related Projects	vim_configurationfile/.vim/plugged/vim-gutentags/README.md	/^# Related Projects$/;"	c
Related work	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Related work$/;"	s
ReleaseTags	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	ReleaseTags   []string$/;"	m	struct:main.go_build_context	typeref:typename:[]string
Reply_auto_complete	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Reply_auto_complete struct {$/;"	s	package:main
Reply_close	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Reply_close struct {$/;"	s	package:main
Reply_cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Reply_cursor_type_pkg struct {$/;"	s	package:main
Reply_drop_cache	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Reply_drop_cache struct {$/;"	s	package:main
Reply_set	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Reply_set struct {$/;"	s	package:main
Reply_status	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^type Reply_status struct {$/;"	s	package:main
Require	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -bar -bang -complete=customlist,fireplace#ns_complete -nargs=? Require :exe s/;"	c
Requirements and Limitations	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^## Requirements and Limitations$/;"	s
RevealBookmark	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Run	vim_configurationfile/.vim/plugged/vim-easy-align/test/README.md	/^### Run$/;"	S
RunAllTests	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -bang -nargs=* RunAllTests$/;"	c
RunTests	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^        \\ -complete=customlist,fireplace#ns_complete RunTests$/;"	c
S	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
SOURCE_EXTENSIONS	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
Screenshot(s)	vim_configurationfile/.vim/plugged/nerdtree/.github/ISSUE_TEMPLATE.md	/^### Screenshot(s)$/;"	S
Self-Promotion	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^## Self-Promotion$/;"	s
Server-side Debug Mode	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^## Server-side Debug Mode ##$/;"	s
Set current menuid	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### Set current menuid$/;"	t
Set header	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### Set header$/;"	t
SetA	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^func (t *Tester) SetA() {$/;"	f	struct:main.Tester
SetA	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^func (t *Tester) SetA() {$/;"	f	struct:main.Tester
SetB	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^func (t *Tester) SetB() {$/;"	f	struct:main.Tester
SetB	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^func (t *Tester) SetB() {$/;"	f	struct:main.Tester
SetC	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/b.go	/^func (t *Tester) SetC() {$/;"	f	unknown:main.Tester
SetC	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/b.go	/^func (t *Tester) SetC() {$/;"	f	unknown:main.Tester
SetD	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/b.go	/^func (t *Tester) SetD() {$/;"	f	unknown:main.Tester
SetD	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/b.go	/^func (t *Tester) SetD() {$/;"	f	unknown:main.Tester
Setup	vim_configurationfile/.vim/plugged/gocode/README.md	/^### Setup$/;"	S
Setup	vim_configurationfile/.vim/plugged/gocode/emacs-company/README.md	/^## Setup$/;"	s
Show / hide quickmenu	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### Show \/ hide quickmenu$/;"	t
ShowUsage	vim_configurationfile/.vim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim_configurationfile/.vim/plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Source	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  command! -buffer -bar -nargs=1 -complete=customlist,fireplace#eval_complete Source  :exe s:Loo/;"	c
Status	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^## Status$/;"	s
String	vim_configurationfile/.vim/plugged/gocode/_testing/test.0027/test.go.in	/^func (file *file) String() {$/;"	f	struct:main.file
String	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (this decl_class) String() string {$/;"	f	type:main.decl_class	typeref:typename:string
Swap	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (b *out_buffers) Swap(i, j int) {$/;"	f	struct:main.out_buffers
Swap	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (s decl_slice) Swap(i, j int) { s[i], s[j] = s[j], s[i] }$/;"	f	type:main.decl_slice
Syntax-aware alignment	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Syntax-aware alignment$/;"	S
T	vim_configurationfile/.vim/plugged/gocode/_testing/test.0047/test.go.in	/^type T struct{ X }$/;"	s	package:p
TAGS_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
Test	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^type Test struct {$/;"	s	package:main
Test Cases	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^### Test Cases$/;"	S
Test cases for vim-easy-align	vim_configurationfile/.vim/plugged/vim-easy-align/test/README.md	/^Test cases for vim-easy-align$/;"	c
Tester	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^type Tester struct {$/;"	s	package:main
Tester	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^type Tester struct {$/;"	s	package:main
Testing	vim_configurationfile/.vim/plugged/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s
The NERDTree	vim_configurationfile/.vim/plugged/nerdtree/README.markdown	/^The NERDTree$/;"	c
Transparent setup	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^### Transparent setup$/;"	S
Tutorial	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^## Tutorial$/;"	s
Type	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	Type  string$/;"	m	struct:main.candidate	typeref:typename:string
U	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	vim_configurationfile/.vim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
UPDATED_SOURCE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
Unlock	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^func (b *Bar) Unlock() {$/;"	f	struct:main.Bar
Unlock	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Usage	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^## Usage$/;"	s
Usage	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^Usage$/;"	s
Usage	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Use the _d_eepest indentation among the lines	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^# Use the _d_eepest indentation among the lines$/;"	c
Use the _s_hallowest indentation among the lines	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^# Use the _s_hallowest indentation among the lines$/;"	c
UseAllFiles	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	UseAllFiles   bool$/;"	m	struct:main.go_build_context	typeref:typename:bool
Using Vundle	vim_configurationfile/.vim/plugged/gocode/README.md	/^#### Using Vundle$/;"	t
Using blockwise-visual mode	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Using blockwise-visual mode$/;"	S
Using blockwise-visual mode or negative N-th parameter	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^Using blockwise-visual mode or negative N-th parameter$/;"	s
Using predefined alignment rules	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Using predefined alignment rules$/;"	S
Using regular expression	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^### Using regular expression$/;"	S
Vim setup	vim_configurationfile/.vim/plugged/gocode/README.md	/^### Vim setup$/;"	S
Visit	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (v *func_lit_visitor) Visit(node ast.Node) ast.Visitor {$/;"	f	struct:main.func_lit_visitor	typeref:typename:ast.Visitor
Visit	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (a *anonymous_typer) Visit(node ast.Node) ast.Visitor {$/;"	f	struct:main.anonymous_typer	typeref:typename:ast.Visitor
What?	vim_configurationfile/.vim/plugged/vim-gutentags/README.md	/^## What?$/;"	s
Why?	vim_configurationfile/.vim/plugged/vim-gutentags/README.md	/^## Why?$/;"	s
Windows support	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^### Windows support$/;"	S
WriteBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
Writing	vim_configurationfile/.vim/plugged/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s
X	vim_configurationfile/.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	vim_configurationfile/.vim/plugged/gocode/_testing/test.0024/test.go.in	/^type X struct {$/;"	s	package:main
X	vim_configurationfile/.vim/plugged/gocode/_testing/test.0028/test.go.in	/^type X int$/;"	t	package:main	typeref:typename:int
X	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^type X struct {$/;"	s	package:main
X	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^type X struct {$/;"	s	package:main
X	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^type X struct {$/;"	s	package:main
X	vim_configurationfile/.vim/plugged/gocode/_testing/test.0044/test.go.in	/^type X struct {$/;"	s	package:main
X	vim_configurationfile/.vim/plugged/gocode/_testing/test.0047/test.go.in	/^type T struct{ X }$/;"	m	struct:p.T	typeref:typename:
Xa	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^	Xa int$/;"	m	struct:main.X	typeref:typename:int
Xa	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^	Xa int$/;"	m	struct:main.X	typeref:typename:int
Xa	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^	Xa int$/;"	m	struct:main.X	typeref:typename:int
Xa	vim_configurationfile/.vim/plugged/gocode/_testing/test.0044/test.go.in	/^	Xa int$/;"	m	struct:main.X	typeref:typename:int
Xb	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^	Xb int$/;"	m	struct:main.X	typeref:typename:int
Xb	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^	Xb int$/;"	m	struct:main.X	typeref:typename:int
Xb	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^	Xb int$/;"	m	struct:main.X	typeref:typename:int
Xb	vim_configurationfile/.vim/plugged/gocode/_testing/test.0044/test.go.in	/^	Xb int$/;"	m	struct:main.X	typeref:typename:int
Xy	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^	Xy Y$/;"	m	struct:main.X	typeref:typename:Y
Xy	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^	Xy Y$/;"	m	struct:main.X	typeref:typename:Y
Xy	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^	Xy Y$/;"	m	struct:main.X	typeref:typename:Y
Y	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^type Y struct {$/;"	s	package:main
Y	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^type Y struct {$/;"	s	package:main
Y	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^type Y struct {$/;"	s	package:main
YCM-Generator	vim_configurationfile/.vim/plugged/YCM-Generator/README.md	/^# YCM-Generator$/;"	c
YELLOW	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^YELLOW = "\\033[0;33m"$/;"	v
Ya	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^	Ya int$/;"	m	struct:main.Y	typeref:typename:int
Ya	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^	Ya int$/;"	m	struct:main.Y	typeref:typename:int
Ya	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^	Ya int$/;"	m	struct:main.Y	typeref:typename:int
Yb	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^	Yb int$/;"	m	struct:main.Y	typeref:typename:int
Yb	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^	Yb int$/;"	m	struct:main.Y	typeref:typename:int
Yb	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^	Yb int$/;"	m	struct:main.Y	typeref:typename:int
YcmGenerateConfig	vim_configurationfile/.vim/plugged/YCM-Generator/plugin/ycm-generator.vim	/^command! -nargs=? -complete=file_in_path -bang YcmGenerateConfig call s:GenerateConfig("ycm", <b/;"	c
You can also pass target file path along with position, it's used to find other files from the same package	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# You can also pass target file path along with position, it's used to find other files from the/;"	c
[[	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[apt-vim](https://github.com/egalpin/apt-vim)	vim_configurationfile/.vim/plugged/nerdtree/README.markdown	/^#### [apt-vim](https:\/\/github.com\/egalpin\/apt-vim)$/;"	t
[pathogen.vim](https://github.com/tpope/vim-pathogen)	vim_configurationfile/.vim/plugged/nerdtree/README.markdown	/^#### [pathogen.vim](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	t
]]	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
__init__	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^    def __init__(self, host, port, custom_poll=noop, keepalive_file=None):$/;"	m	class:Connection
`,`	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### `,`$/;"	t
`<Space>`	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### `<Space>`$/;"	t
`=`	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^#### `=`$/;"	t
a	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
a	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
a	vim_configurationfile/.vim/plugged/gocode/_testing/test.0017/test.go.in	/^func a(a, b, c int) int {$/;"	f	package:main	typeref:typename:int
a	vim_configurationfile/.vim/plugged/gocode/_testing/test.0024/test.go.in	/^	a,b,c int$/;"	m	struct:main.X	typeref:typename:int
a	vim_configurationfile/.vim/plugged/gocode/_testing/test.0033/test.go.in	/^	a, b, c int$/;"	m	struct:main.Dummy	typeref:typename:int
abs_path_for_package	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func abs_path_for_package(filename, p string, context build.Context) (string, bool) {$/;"	f	package:main	typeref:typename:(string, bool)
ac-comphist-sort	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-comphist-sort (db collection prefix &optional threshold)$/;"	f
ac-go-action	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-action ()$/;"	f
ac-go-candidates	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-candidates ()$/;"	f
ac-go-document	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-document (item)$/;"	f
ac-go-expand-arguments-into-snippets	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defcustom ac-go-expand-arguments-into-snippets t$/;"	f
ac-go-format-autocomplete	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-format-autocomplete (buffer-contents)$/;"	f
ac-go-get-candidates	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-get-candidates (strings)$/;"	f
ac-go-insert-yas-snippet-string	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-insert-yas-snippet-string (s)$/;"	f
ac-go-invoke-autocomplete	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-invoke-autocomplete ()$/;"	f
ac-go-prefix	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-prefix ()$/;"	f
ac-go-split-args	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defun ac-go-split-args (args-str)$/;"	f
add_ast_decl_to_package	vim_configurationfile/.vim/plugged/gocode/package.go	/^func add_ast_decl_to_package(pkg *decl, decl ast.Decl, scope *scope) {$/;"	f	package:main
add_builtin_unsafe_package	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (c package_cache) add_builtin_unsafe_package() {$/;"	f	type:main.package_cache
add_child	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) add_child(cd *decl) {$/;"	f	struct:main.decl
add_decl	vim_configurationfile/.vim/plugged/gocode/scope.go	/^func (s *scope) add_decl(name string, d *decl) *decl {$/;"	f	struct:main.scope	typeref:typename:*decl
add_named_decl	vim_configurationfile/.vim/plugged/gocode/scope.go	/^func (s *scope) add_named_decl(d *decl) *decl {$/;"	f	struct:main.scope	typeref:typename:*decl
add_package_to_scope	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (m *package_file_cache) add_package_to_scope(alias, realname string) {$/;"	f	struct:main.package_file_cache
advance_scope	vim_configurationfile/.vim/plugged/gocode/scope.go	/^func advance_scope(s *scope) (*scope, *scope) {$/;"	f	package:main	typeref:typename:(*scope, *scope)
advance_to_struct_or_interface	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func advance_to_struct_or_interface(decl *decl) *decl {$/;"	f	package:main	typeref:typename:*decl
advance_to_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func advance_to_type(pred type_predicate, v ast.Expr, scope *scope) (ast.Expr, *scope) {$/;"	f	package:main	typeref:typename:(ast.Expr, *scope)
alias	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	alias string$/;"	m	struct:main.package_import	typeref:typename:string
anonymify_ast	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func anonymify_ast(node ast.Node, flags decl_flags, scope *scope) {$/;"	f	package:main
anonymous_id_gen	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type anonymous_id_gen struct {$/;"	s	package:main
anonymous_typer	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type anonymous_typer struct {$/;"	s	package:main
append_decl	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (b *out_buffers) append_decl(p, name string, decl *decl, class decl_class) {$/;"	f	struct:main.out_buffers
append_embedded	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (b *out_buffers) append_embedded(p string, decl *decl, class decl_class) {$/;"	f	struct:main.out_buffers
append_packages	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (c package_cache) append_packages(ps map[string]*package_file_cache, pkgs []package_import)/;"	f	type:main.package_cache
append_to_top_decls	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func append_to_top_decls(decls map[string]*decl, decl ast.Decl, scope *scope) {$/;"	f	package:main
apropos	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) apropos(file []byte, filename string, cursor int) ([]candidate, /;"	f	struct:main.auto_complete_context	typeref:typename:([]candidate, int)
ast_decl_class	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_decl_class(d ast.Decl) decl_class {$/;"	f	package:main	typeref:typename:decl_class
ast_decl_convertable	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_decl_convertable(d ast.Decl) bool {$/;"	f	package:main	typeref:typename:bool
ast_decl_names	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_decl_names(d ast.Decl) []*ast.Ident {$/;"	f	package:main	typeref:typename:[]*ast.Ident
ast_decl_split	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_decl_split(d ast.Decl) []ast.Decl {$/;"	f	package:main	typeref:typename:[]ast.Decl
ast_decl_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_decl_type(d ast.Decl) ast.Expr {$/;"	f	package:main	typeref:typename:ast.Expr
ast_decl_values	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_decl_values(d ast.Decl) []ast.Expr {$/;"	f	package:main	typeref:typename:[]ast.Expr
ast_field_list_to_decls	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_field_list_to_decls(f *ast.FieldList, class decl_class, flags decl_flags, scope *scope,/;"	f	package:main	typeref:typename:map[string]*decl
ast_field_list_to_embedded	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_field_list_to_embedded(f *ast.FieldList) []ast.Expr {$/;"	f	package:main	typeref:typename:[]ast.Expr
ast_type_to_children	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_type_to_children(ty ast.Expr, flags decl_flags, scope *scope) map[string]*decl {$/;"	f	package:main	typeref:typename:map[string]*decl
ast_type_to_embedded	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func ast_type_to_embedded(ty ast.Expr) []ast.Expr {$/;"	f	package:main	typeref:typename:[]ast.Expr
auto_complete_context	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^type auto_complete_context struct {$/;"	s	package:main
auto_complete_file	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^type auto_complete_file struct {$/;"	s	package:main
autobuild	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func autobuild(p *build.Package) error {$/;"	f	package:main	typeref:typename:error
autocomplete	vim_configurationfile/.vim/plugged/gocode/server.go	/^	autocomplete *auto_complete_context$/;"	m	struct:main.daemon	typeref:typename:*auto_complete_context
b	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
b	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
b	vim_configurationfile/.vim/plugged/gocode/_testing/test.0017/test.go.in	/^func b(a, b, c string) string {$/;"	f	package:main	typeref:typename:string
b	vim_configurationfile/.vim/plugged/gocode/_testing/test.0024/test.go.in	/^	a,b,c int$/;"	m	struct:main.X	typeref:typename:int
b	vim_configurationfile/.vim/plugged/gocode/_testing/test.0033/test.go.in	/^	a, b, c int$/;"	m	struct:main.Dummy	typeref:typename:int
bdecode	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^def bdecode(f, char=None):$/;"	f
beautify	vim_configurationfile/.vim/plugged/gocode/package.go	/^	beautify      bool$/;"	m	struct:main.gc_parser	typeref:typename:bool
build_package	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func build_package(p *build.Package) error {$/;"	f	package:main	typeref:typename:error
builtin_type_names	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^var builtin_type_names = []*ast.Ident{$/;"	v	package:main
c	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
c	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
c	vim_configurationfile/.vim/plugged/gocode/_testing/test.0024/test.go.in	/^	a,b,c int$/;"	m	struct:main.X	typeref:typename:int
c	vim_configurationfile/.vim/plugged/gocode/_testing/test.0033/test.go.in	/^	a, b, c int$/;"	m	struct:main.Dummy	typeref:typename:int
cache	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	cache   map[string]*decl_file_cache$/;"	m	struct:main.decl_cache	typeref:typename:map[string]*decl_file_cache
call	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^    def call(self, payload, terminators, selectors):$/;"	m	class:Connection
candidate	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^type candidate struct {$/;"	s	package:main
candidates	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	candidates []candidate$/;"	m	struct:main.out_buffers	typeref:typename:[]candidate
chan_predicate	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func chan_predicate(v ast.Expr) bool {$/;"	f	package:main	typeref:typename:bool
char_to_byte_offset	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func char_to_byte_offset(s []byte, offset_c int) (offset_b int) {$/;"	f	package:main	typeref:typename:(offset_b int)
check_for_anon_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func check_for_anon_type(t ast.Expr, flags decl_flags, s *scope) ast.Expr {$/;"	f	package:main	typeref:typename:ast.Expr
check_for_builtin_funcs	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func check_for_builtin_funcs(typ *ast.Ident, c *ast.CallExpr, scope *scope) (ast.Expr, *scope) {$/;"	f	package:main	typeref:typename:(ast.Expr, *scope)
check_func_field_list	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func check_func_field_list(f *ast.FieldList) bool {$/;"	f	package:main	typeref:typename:bool
check_type_expr	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func check_type_expr(e ast.Expr) bool {$/;"	f	package:main	typeref:typename:bool
children	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	children map[string]*decl$/;"	m	struct:main.decl	typeref:typename:map[string]*decl
class	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	class decl_class$/;"	m	struct:main.decl	typeref:typename:decl_class
clear_visited	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) clear_visited() {$/;"	f	struct:main.decl
client_auto_complete	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func client_auto_complete(cli *rpc.Client, Arg0 []byte, Arg1 string, Arg2 int, Arg3 go_build_con/;"	f	package:main	typeref:typename:(c []candidate, d int)
client_close	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func client_close(cli *rpc.Client, Arg0 int) int {$/;"	f	package:main	typeref:typename:int
client_cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func client_cursor_type_pkg(cli *rpc.Client, Arg0 []byte, Arg1 string, Arg2 int) (typ, pkg strin/;"	f	package:main	typeref:typename:(typ, pkg string)
client_drop_cache	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func client_drop_cache(cli *rpc.Client, Arg0 int) int {$/;"	f	package:main	typeref:typename:int
client_set	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func client_set(cli *rpc.Client, Arg0, Arg1 string) string {$/;"	f	package:main	typeref:typename:string
client_status	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^func client_status(cli *rpc.Client, Arg0 int) string {$/;"	f	package:main	typeref:typename:string
close	vim_configurationfile/.vim/plugged/gocode/server.go	/^func (this *daemon) close() {$/;"	f	struct:main.daemon
close	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^    def close(self):$/;"	m	class:Connection
cmd_auto_complete	vim_configurationfile/.vim/plugged/gocode/client.go	/^func cmd_auto_complete(c *rpc.Client) {$/;"	f	package:main
cmd_close	vim_configurationfile/.vim/plugged/gocode/client.go	/^func cmd_close(c *rpc.Client) {$/;"	f	package:main
cmd_cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/client.go	/^func cmd_cursor_type_pkg(c *rpc.Client) {$/;"	f	package:main
cmd_drop_cache	vim_configurationfile/.vim/plugged/gocode/client.go	/^func cmd_drop_cache(c *rpc.Client) {$/;"	f	package:main
cmd_in	vim_configurationfile/.vim/plugged/gocode/server.go	/^	cmd_in       chan int$/;"	m	struct:main.daemon	typeref:typename:chan int
cmd_set	vim_configurationfile/.vim/plugged/gocode/client.go	/^func cmd_set(c *rpc.Client) {$/;"	f	package:main
cmd_status	vim_configurationfile/.vim/plugged/gocode/client.go	/^func cmd_status(c *rpc.Client) {$/;"	f	package:main
collect_package_imports	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func collect_package_imports(filename string, decls []ast.Decl, context build.Context) []package/;"	f	package:main	typeref:typename:[]package_import
color_blue	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_blue         = "\\033[0;34m"$/;"	c	package:main
color_blue_bold	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_blue_bold    = "\\033[1;34m"$/;"	c	package:main
color_cyan	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_cyan         = "\\033[0;36m"$/;"	c	package:main
color_cyan_bold	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_cyan_bold    = "\\033[1;36m"$/;"	c	package:main
color_green	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_green        = "\\033[0;32m"$/;"	c	package:main
color_green_bold	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_green_bold   = "\\033[1;32m"$/;"	c	package:main
color_magenta	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_magenta      = "\\033[0;35m"$/;"	c	package:main
color_magenta_bold	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_magenta_bold = "\\033[1;35m"$/;"	c	package:main
color_none	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_none         = "\\033[0m"$/;"	c	package:main
color_red	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_red          = "\\033[0;31m"$/;"	c	package:main
color_red_bold	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_red_bold     = "\\033[1;31m"$/;"	c	package:main
color_white	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_white        = "\\033[0;37m"$/;"	c	package:main
color_white_bold	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_white_bold   = "\\033[1;37m"$/;"	c	package:main
color_yellow	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_yellow       = "\\033[0;33m"$/;"	c	package:main
color_yellow_bold	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	color_yellow_bold  = "\\033[1;33m"$/;"	c	package:main
company-go	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defgroup company-go nil$/;"	f
company-go	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go (command &optional arg &rest ignored)$/;"	f
company-go--candidates	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--candidates ()$/;"	f
company-go--extract-annotation	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--extract-annotation (meta)$/;"	f
company-go--extract-arguments	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--extract-arguments (str)$/;"	f
company-go--format-meta	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--format-meta (candidate)$/;"	f
company-go--get-candidates	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--get-candidates (strings)$/;"	f
company-go--godef-jump	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--godef-jump (point)$/;"	f
company-go--insert-arguments	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--insert-arguments (meta)$/;"	f
company-go--invoke-autocomplete	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--invoke-autocomplete ()$/;"	f
company-go--location	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--location (arg)$/;"	f
company-go--location-1	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--location-1 (arg)$/;"	f
company-go--prefix	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defun company-go--prefix ()$/;"	f
company-go-begin-after-member-access	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defcustom company-go-begin-after-member-access t$/;"	f
company-go-gocode-command	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defcustom company-go-gocode-command "gocode"$/;"	f
company-go-insert-arguments	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defcustom company-go-insert-arguments t$/;"	f
company-go-show-annotation	vim_configurationfile/.vim/plugged/gocode/emacs-company/company-go.el	/^(defcustom company-go-show-annotation nil$/;"	f
compilation_database_folder	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^compilation_database_folder = ''$/;"	v
config	vim_configurationfile/.vim/plugged/gocode/config.go	/^type config struct {$/;"	s	package:main
config_dir	vim_configurationfile/.vim/plugged/gocode/os_posix.go	/^func config_dir() string {$/;"	f	package:main	typeref:typename:string
config_dir	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^func config_dir() string {$/;"	f	package:main	typeref:typename:string
config_file	vim_configurationfile/.vim/plugged/gocode/os_posix.go	/^func config_file() string {$/;"	f	package:main	typeref:typename:string
config_file	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^func config_file() string {$/;"	f	package:main	typeref:typename:string
context	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	context build.Context$/;"	m	struct:main.auto_complete_file	typeref:typename:build.Context
context	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	context build.Context$/;"	m	struct:main.decl_cache	typeref:typename:build.Context
context	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	context build.Context$/;"	m	struct:main.decl_file_cache	typeref:typename:build.Context
context	vim_configurationfile/.vim/plugged/gocode/server.go	/^	context      build.Context$/;"	m	struct:main.daemon	typeref:typename:build.Context
create_foo	vim_configurationfile/.vim/plugged/gocode/_testing/test.0040/test.go.in	/^func create_foo() Foo {$/;"	f	package:main	typeref:typename:Foo
create_sock_flag	vim_configurationfile/.vim/plugged/gocode/os_posix.go	/^func create_sock_flag(name, desc string) *string {$/;"	f	package:main	typeref:typename:*string
create_sock_flag	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^func create_sock_flag(name, desc string) *string {$/;"	f	package:main	typeref:typename:*string
csidl_appdata	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^	csidl_appdata = 0x1a$/;"	c	package:main
csv	vim_configurationfile/.vim/plugged/gocode/docs/autocomplete_formats.md	/^## csv ##$/;"	s
csv_formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^type csv_formatter struct{}$/;"	s	package:main
ctx	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	ctx        *auto_complete_context$/;"	m	struct:main.out_buffers	typeref:typename:*auto_complete_context
ctx	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	ctx *auto_complete_file$/;"	m	struct:main.func_lit_visitor	typeref:typename:*auto_complete_file
current	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	current *auto_complete_file \/\/ currently edited file$/;"	m	struct:main.auto_complete_context	typeref:typename:*auto_complete_file
cursor	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	cursor  int \/\/ for current file buffer only$/;"	m	struct:main.auto_complete_file	typeref:typename:int
cursor_context	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^type cursor_context struct {$/;"	s	package:main
cursor_in	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) cursor_in(block *ast.BlockStmt) bool {$/;"	f	struct:main.auto_complete_file	typeref:typename:bool
cursor_in_for_head	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) cursor_in_for_head(s *ast.ForStmt) bool {$/;"	f	struct:main.auto_complete_file	typeref:typename:bool
cursor_in_if_head	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) cursor_in_if_head(s *ast.IfStmt) bool {$/;"	f	struct:main.auto_complete_file	typeref:typename:bool
cursor_in_if_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) cursor_in_if_stmt(s *ast.IfStmt) bool {$/;"	f	struct:main.auto_complete_file	typeref:typename:bool
cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) cursor_type_pkg(file []byte, filename string, cursor int) (strin/;"	f	struct:main.auto_complete_context	typeref:typename:(string, string)
d	vim_configurationfile/.vim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	vim_configurationfile/.vim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
d	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
d	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^	a, b, c, d int$/;"	m	struct:main.Tester	typeref:typename:int
daemon	vim_configurationfile/.vim/plugged/gocode/server.go	/^type daemon struct {$/;"	s	package:main
daemon_close	vim_configurationfile/.vim/plugged/gocode/server.go	/^	daemon_close = iota$/;"	c	package:main
data	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	data  []byte$/;"	m	struct:main.file_read_response	typeref:typename:[]byte
database	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
dd	vim_configurationfile/.vim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
decl	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^	decl    *decl$/;"	m	struct:main.cursor_context	typeref:typename:*decl
decl	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl ast.Decl$/;"	m	struct:main.foreach_decl_struct	typeref:typename:ast.Decl
decl	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type decl struct {$/;"	s	package:main
decl_cache	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^type decl_cache struct {$/;"	s	package:main
decl_class	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type decl_class int16$/;"	t	package:main	typeref:typename:int16
decl_const	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_const$/;"	c	package:main
decl_file_cache	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^type decl_file_cache struct {$/;"	s	package:main
decl_flags	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type decl_flags int16$/;"	t	package:main	typeref:typename:int16
decl_foreign	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_foreign = decl_flags(1 << iota) \/\/ imported from another package$/;"	c	package:main
decl_func	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_func$/;"	c	package:main
decl_invalid	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_invalid = decl_class(-1 + iota)$/;"	c	package:main
decl_methods_stub	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_methods_stub$/;"	c	package:main
decl_pack	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_pack$/;"	M	struct:main.foreach_decl_struct	typeref:typename:decl_pack
decl_pack	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type decl_pack struct {$/;"	s	package:main
decl_package	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_package$/;"	c	package:main
decl_rangevar	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_rangevar$/;"	c	package:main
decl_slice	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^type decl_slice []*decl$/;"	t	package:main	typeref:typename:[]*decl
decl_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_type$/;"	c	package:main
decl_var	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_var$/;"	c	package:main
decl_visited	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	decl_visited$/;"	c	package:main
declcache	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	declcache *decl_cache   \/\/ top-level declarations cache$/;"	m	struct:main.auto_complete_context	typeref:typename:*decl_cache
declcache	vim_configurationfile/.vim/plugged/gocode/server.go	/^	declcache    *decl_cache$/;"	m	struct:main.daemon	typeref:typename:*decl_cache
decls	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	decls     map[string]*decl$/;"	m	struct:main.auto_complete_file	typeref:typename:map[string]*decl
decls	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	decls     map[string]*decl \/\/ top-level declarations$/;"	m	struct:main.decl_file_cache	typeref:typename:map[string]*decl
deduce_cursor_context	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (c *auto_complete_context) deduce_cursor_context(file []byte, cursor int) (cursor_context, /;"	f	unknown:main.auto_complete_context	typeref:typename:(cursor_context, bool)
deduce_cursor_decl	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (c *auto_complete_context) deduce_cursor_decl(iter *token_iterator) *decl {$/;"	f	unknown:main.auto_complete_context	typeref:typename:*decl
deduce_cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (c *auto_complete_context) deduce_cursor_type_pkg(file []byte, cursor int) (ast.Expr, strin/;"	f	unknown:main.auto_complete_context	typeref:typename:(ast.Expr, string, bool)
deep_copy	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (other *decl) deep_copy() *decl {$/;"	f	struct:main.decl	typeref:typename:*decl
defalias	vim_configurationfile/.vim/plugged/gocode/package.go	/^	defalias string$/;"	m	struct:main.package_file_cache	typeref:typename:string
default_make_flags	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^default_make_flags = ["-i", "-j" + str(multiprocessing.cpu_count())]$/;"	v
dispatch	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^def dispatch(host, port, poll, keepalive, command, *args):$/;"	f
do_client	vim_configurationfile/.vim/plugged/gocode/client.go	/^func do_client() int {$/;"	f	package:main	typeref:typename:int
do_server	vim_configurationfile/.vim/plugged/gocode/server.go	/^func do_server() int {$/;"	f	package:main	typeref:typename:int
drop_cache	vim_configurationfile/.vim/plugged/gocode/server.go	/^func (this *daemon) drop_cache() {$/;"	f	struct:main.daemon
easy-align examples	vim_configurationfile/.vim/plugged/vim-easy-align/EXAMPLES.md	/^easy-align examples$/;"	c
easy_align#align	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! easy_align#align(bang, live, visualmode, expr) range$/;"	f
emacs	vim_configurationfile/.vim/plugged/gocode/docs/autocomplete_formats.md	/^## emacs ##$/;"	s
emacs_formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^type emacs_formatter struct{}$/;"	s	package:main
embedded	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	embedded []ast.Expr$/;"	m	struct:main.decl	typeref:typename:[]ast.Expr
entities	vim_configurationfile/.vim/plugged/gocode/scope.go	/^	entities map[string]*decl$/;"	m	struct:main.scope	typeref:typename:map[string]*decl
error	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	error     error            \/\/ last error$/;"	m	struct:main.decl_file_cache	typeref:typename:error
error	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) error(msg string) {$/;"	f	struct:main.gc_parser
error	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	error error$/;"	m	struct:main.file_read_response	typeref:typename:error
errorf	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) errorf(format string, args ...interface{}) {$/;"	f	struct:main.import_data_parser
errorf	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) errorf(format string, args ...interface{}) {$/;"	f	struct:main.gc_parser
expand_or_replace	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) expand_or_replace(other *decl) {$/;"	f	struct:main.decl
expect	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) expect(x rune) string {$/;"	f	struct:main.import_data_parser	typeref:typename:string
expect	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) expect(tok rune) string {$/;"	f	struct:main.gc_parser	typeref:typename:string
expect_ident	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) expect_ident(ident string) {$/;"	f	struct:main.import_data_parser
expect_keyword	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) expect_keyword(keyword string) {$/;"	f	struct:main.gc_parser
expect_special	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) expect_special(special string) {$/;"	f	struct:main.import_data_parser
expect_special	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) expect_special(what string) {$/;"	f	struct:main.gc_parser
expected_fail	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^expected_fail = 0$/;"	v
expected_to_fail	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^expected_to_fail = {$/;"	v
expr_to_decl	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func expr_to_decl(e ast.Expr, scope *scope) *decl {$/;"	f	package:main	typeref:typename:*decl
extract_go_expr	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (this *token_iterator) extract_go_expr() []byte {$/;"	f	struct:main.token_iterator	typeref:typename:[]byte
fail	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^fail = 0$/;"	v
fake_build	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^def fake_build(project_dir, c_build_log_path, cxx_build_log_path, verbose, make_cmd, build_syste/;"	f
file	vim_configurationfile/.vim/plugged/gocode/_testing/test.0027/test.go.in	/^type file struct {$/;"	s	package:main
file_exists	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func file_exists(filename string) bool {$/;"	f	package:main	typeref:typename:bool
file_package_name	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func file_package_name(filename string) string {$/;"	f	package:main	typeref:typename:string
file_read_request	vim_configurationfile/.vim/plugged/gocode/utils.go	/^type file_read_request struct {$/;"	s	package:main
file_read_response	vim_configurationfile/.vim/plugged/gocode/utils.go	/^type file_read_response struct {$/;"	s	package:main
file_reader	vim_configurationfile/.vim/plugged/gocode/utils.go	/^var file_reader = new_file_reader()$/;"	v	package:main
file_reader_type	vim_configurationfile/.vim/plugged/gocode/utils.go	/^type file_reader_type struct {$/;"	s	package:main
filename	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	filename string$/;"	m	struct:main.file_read_request	typeref:typename:string
filescope	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	filescope *scope$/;"	m	struct:main.auto_complete_file	typeref:typename:*scope
filescope	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	filescope *scope$/;"	m	struct:main.decl_file_cache	typeref:typename:*scope
filetypedetect	vim_configurationfile/.vim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filter_out_shebang	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func filter_out_shebang(data []byte) ([]byte, int) {$/;"	f	package:main	typeref:typename:([]byte, int)
find_child	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) find_child(name string) *decl {$/;"	f	struct:main.decl	typeref:typename:*decl
find_child_and_in_embedded	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) find_child_and_in_embedded(name string) *decl {$/;"	f	struct:main.decl	typeref:typename:*decl
find_decl_beg	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^func (this *tok_collection) find_decl_beg(pos int) int {$/;"	f	struct:main.tok_collection	typeref:typename:int
find_decl_end	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^func (this *tok_collection) find_decl_end(pos int) int {$/;"	f	struct:main.tok_collection	typeref:typename:int
find_file	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (m *package_file_cache) find_file() string {$/;"	f	struct:main.package_file_cache	typeref:typename:string
find_global_file	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func find_global_file(imp string, context build.Context) (string, bool) {$/;"	f	package:main	typeref:typename:(string, bool)
find_go_dag_package	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func find_go_dag_package(imp, filedir string) (string, bool) {$/;"	f	package:main	typeref:typename:(string, bool)
find_other_package_files	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func find_other_package_files(filename, package_name string) []string {$/;"	f	package:main	typeref:typename:[]string
find_outermost_scope	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^func (this *tok_collection) find_outermost_scope(cursor int) (int, int) {$/;"	f	struct:main.tok_collection	typeref:typename:(int, int)
fireplace#capture_test_run	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#capture_test_run(expr, ...) abort$/;"	f
fireplace#cfile	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#cfile() abort$/;"	f
fireplace#client	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#client(...) abort$/;"	f
fireplace#echo_session_eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#echo_session_eval(expr, ...) abort$/;"	f
fireplace#eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#eval(...) abort$/;"	f
fireplace#eval_complete	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#eval_complete(A, L, P) abort$/;"	f
fireplace#evalparse	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#evalparse(expr, ...) abort$/;"	f
fireplace#evalprint	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#evalprint(expr) abort$/;"	f
fireplace#findfile	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#findfile(path) abort$/;"	f
fireplace#findresource	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#findresource(resource, ...) abort$/;"	f
fireplace#format	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#format(lnum, count, char) abort$/;"	f
fireplace#info	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#info(symbol) abort$/;"	f
fireplace#input_host_port	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#input_host_port() abort$/;"	f
fireplace#jar_contents	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#jar_contents(path) abort$/;"	f
fireplace#location	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#location(keyword) abort$/;"	f
fireplace#macroexpand	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#macroexpand(fn, form) abort$/;"	f
fireplace#message	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#message(payload, ...) abort$/;"	f
fireplace#nrepl#callback	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! fireplace#nrepl#callback(body, type, callback) abort$/;"	f
fireplace#nrepl#combine	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! fireplace#nrepl#combine(responses)$/;"	f
fireplace#nrepl#for	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! fireplace#nrepl#for(transport) abort$/;"	f
fireplace#nrepl#next_id	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! fireplace#nrepl#next_id() abort$/;"	f
fireplace#nrepl_connection#bencode	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! fireplace#nrepl_connection#bencode(value) abort$/;"	f
fireplace#nrepl_connection#open	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! fireplace#nrepl_connection#open(arg) abort$/;"	f
fireplace#nrepl_connection#prompt	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! fireplace#nrepl_connection#prompt() abort$/;"	f
fireplace#ns	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#ns(...) abort$/;"	f
fireplace#ns_complete	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#ns_complete(A, L, P) abort$/;"	f
fireplace#omnicomplete	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#omnicomplete(findstart, base) abort$/;"	f
fireplace#op_available	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#op_available(op) abort$/;"	f
fireplace#path	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#path(...) abort$/;"	f
fireplace#platform	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#platform(...) abort$/;"	f
fireplace#query	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#query(expr, ...) abort$/;"	f
fireplace#quickfix_for	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#quickfix_for(stacktrace) abort$/;"	f
fireplace#register_port_file	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#register_port_file(portfile, ...) abort$/;"	f
fireplace#resolve_alias	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#resolve_alias(name) abort$/;"	f
fireplace#session_eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#session_eval(expr, ...) abort$/;"	f
fireplace#skip	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let fireplace#skip = 'synIDattr(synID(line("."),col("."),1),"name") =~? "comment\\\\|string\\\\|/;"	v
fireplace#source	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! fireplace#source(symbol) abort$/;"	f
fireplace.vim	vim_configurationfile/.vim/plugged/vim-fireplace/README.markdown	/^# fireplace.vim$/;"	c
fireplace_completion	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_completion$/;"	a
fireplace_connect	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_connect$/;"	a
fireplace_doc	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_doc$/;"	a
fireplace_eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_eval$/;"	a
fireplace_file_type	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_file_type$/;"	a
fireplace_formatting	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_formatting$/;"	a
fireplace_go_to_file	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_go_to_file$/;"	a
fireplace_nrepl_connection	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^augroup fireplace_nrepl_connection$/;"	a
fireplace_quickfix	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_quickfix$/;"	a
fireplace_require	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_require$/;"	a
fireplace_source	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_source$/;"	a
fireplace_tests	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^augroup fireplace_tests$/;"	a
fixup_packages	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func fixup_packages(filescope *scope, pkgs []package_import, pcache package_cache) {$/;"	f	package:main
flags	vim_configurationfile/.vim/plugged/YCM-Generator/template.py	/^flags = [$/;"	v
flags	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	flags decl_flags$/;"	m	struct:main.anonymous_typer	typeref:typename:decl_flags
flags	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	flags decl_flags$/;"	m	struct:main.decl	typeref:typename:decl_flags
foo	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^func (x X) foo() {$/;"	f	struct:main.X
foo	vim_configurationfile/.vim/plugged/gocode/_testing/test.0044/test.go.in	/^func (x X) foo() {$/;"	f	struct:main.X
foreach_decl	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func foreach_decl(decl ast.Decl, do foreach_decl_func) {$/;"	f	package:main
foreach_decl_func	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type foreach_decl_func func(data *foreach_decl_struct)$/;"	t	package:main	typeref:typename:func(data *foreach_decl_struct)
foreach_decl_struct	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type foreach_decl_struct struct {$/;"	s	package:main
formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^type formatter interface {$/;"	i	package:main
fset	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	fset    *token.FileSet$/;"	m	struct:main.auto_complete_file	typeref:typename:*token.FileSet
fset	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	fset    *token.FileSet$/;"	m	struct:main.decl_file_cache	typeref:typename:*token.FileSet
fset	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^	fset   *token.FileSet$/;"	m	struct:main.tok_collection	typeref:typename:*token.FileSet
func FieldsFunc(s []byte, f func(rune) bool) [][]byte	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^  func FieldsFunc(s []byte, f func(rune) bool) [][]byte$/;"	c
func_lit_visitor	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^type func_lit_visitor struct {$/;"	s	package:main
func_predicate	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func func_predicate(v ast.Expr) bool {$/;"	f	package:main	typeref:typename:bool
func_return_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func func_return_type(f *ast.FuncType, index int) ast.Expr {$/;"	f	package:main	typeref:typename:ast.Expr
g:	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:FIREPLACE_HISTORY	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^      let g:FIREPLACE_HISTORY = s:histswap(s:oldhist)$/;"	v
g:FIREPLACE_HISTORY	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^    let g:FIREPLACE_HISTORY = []$/;"	v
g:NERDTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoDeleteBuffer	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeCreator	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirNode	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeIgnore	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeInvalidBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMenuController	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuItem	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeOldSortOrder	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^    let g:NERDTreeOldSortOrder = g:NERDTreeSortOrder$/;"	v
g:NERDTreeOldSortOrder	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^                let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^        let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeSortOrder	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
g:NERDTreeUI	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:_plug_bang	vim_configurationfile/.vim/autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:autoloaded_fireplace_nrepl	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^let g:autoloaded_fireplace_nrepl = 1$/;"	v
g:autoloaded_nrepl_fireplace_connection	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^let g:autoloaded_nrepl_fireplace_connection = 1$/;"	v
g:easy_align_last_command	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^      let g:easy_align_last_command = s:echon('', n, regexp, ch, copts, '')$/;"	v
g:easy_align_last_command	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^    let g:easy_align_last_command = s:echon('', n, regx, d, copts, '')$/;"	v
g:easy_align_need_repeat	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^      let g:easy_align_need_repeat = 1$/;"	v
g:fireplace#reader	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let g:fireplace#reader =$/;"	v
g:fireplace_nrepl_sessions	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^    let g:fireplace_nrepl_sessions[client.session] = client$/;"	v
g:fireplace_nrepl_sessions	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^  let g:fireplace_nrepl_sessions = {}$/;"	v
g:fireplace_nrepl_sessions	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^  let g:fireplace_nrepl_sessions[client.session] = client$/;"	v
g:gutentags_add_default_project_roots	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_executable	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:loaded_easy_align	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let g:loaded_easy_align = 1$/;"	v
g:loaded_easy_align_plugin	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^let g:loaded_easy_align_plugin = 1$/;"	v
g:loaded_fireplace	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let g:loaded_fireplace = 1$/;"	v
g:loaded_gocode	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^let g:loaded_gocode = 1$/;"	v
g:loaded_gutentags	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_nerdtree_autoload	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_plug	vim_configurationfile/.vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:plug_home	vim_configurationfile/.vim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	vim_configurationfile/.vim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	vim_configurationfile/.vim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	vim_configurationfile/.vim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	vim_configurationfile/.vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:quickmenu_disable_nofile	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	let g:quickmenu_disable_nofile = 1$/;"	v
g:quickmenu_disable_nofile (integer)	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### g:quickmenu_disable_nofile (integer)$/;"	t
g:quickmenu_ft_blacklist	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	let g:quickmenu_ft_blacklist = ['netrw', 'nerdtree', 'startify']$/;"	v
g:quickmenu_ft_blacklist (list)	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### g:quickmenu_ft_blacklist (list)$/;"	t
g:quickmenu_max_width	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	let g:quickmenu_max_width = 40$/;"	v
g:quickmenu_options	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	let g:quickmenu_options = ''$/;"	v
g:quickmenu_options (string)	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### g:quickmenu_options (string)$/;"	t
g:quickmenu_padding_left	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	let g:quickmenu_padding_left = 3$/;"	v
g:quickmenu_padding_left (integer)	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### g:quickmenu_padding_left (integer)$/;"	t
g:quickmenu_padding_right	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	let g:quickmenu_padding_right = 3$/;"	v
g:quickmenu_padding_right (integer)	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### g:quickmenu_padding_right (integer)$/;"	t
g_addr	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^	g_addr      = flag.String("addr", "localhost:37373", "address for tcp socket")$/;"	v	package:main
g_anon_gen	vim_configurationfile/.vim/plugged/gocode/decl.go	/^var g_anon_gen anonymous_id_gen$/;"	v	package:main	typeref:struct:anonymous_id_gen
g_backtrace_mutex	vim_configurationfile/.vim/plugged/gocode/utils.go	/^var g_backtrace_mutex sync.Mutex$/;"	v	package:main	typeref:typename:sync.Mutex
g_bracket_pairs	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^var g_bracket_pairs = map[token.Token]token.Token{$/;"	v	package:main
g_builtin_unsafe_package	vim_configurationfile/.vim/plugged/gocode/package.go	/^var g_builtin_unsafe_package = []byte(`$/;"	v	package:main
g_config	vim_configurationfile/.vim/plugged/gocode/config.go	/^var g_config = config{$/;"	v	package:main
g_daemon	vim_configurationfile/.vim/plugged/gocode/server.go	/^var g_daemon *daemon$/;"	v	package:main	typeref:typename:*daemon
g_debug	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^	g_debug     = flag.Bool("debug", false, "enable server-side debug mode")$/;"	v	package:main
g_decl_class_to_color	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^var g_decl_class_to_color = [...]string{$/;"	v	package:main
g_decl_class_to_string_status	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^var g_decl_class_to_string_status = [...]string{$/;"	v	package:main
g_format	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^	g_format    = flag.String("f", "nice", "output format (vim | emacs | nice | csv | json)")$/;"	v	package:main
g_input	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^	g_input     = flag.String("in", "", "use this file instead of stdin input")$/;"	v	package:main
g_is_server	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^	g_is_server = flag.Bool("s", false, "run a server instead of a client")$/;"	v	package:main
g_profile	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^	g_profile   = flag.Int("profile", 0, "port on which to expose profiling information for pprof; /;"	v	package:main
g_sock	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^	g_sock      = create_sock_flag("sock", "socket type (unix | tcp)")$/;"	v	package:main
g_string_to_bool	vim_configurationfile/.vim/plugged/gocode/config.go	/^var g_string_to_bool = map[string]bool{$/;"	v	package:main
g_universe_scope	vim_configurationfile/.vim/plugged/gocode/decl.go	/^var g_universe_scope = new_scope(nil)$/;"	v	package:main
gc_parser	vim_configurationfile/.vim/plugged/gocode/package.go	/^type gc_parser struct {$/;"	s	package:main
gen	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (a *anonymous_id_gen) gen() (id int) {$/;"	f	struct:main.anonymous_id_gen	typeref:typename:(id int)
generate_cc_conf	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^def generate_cc_conf(flags, config_file):$/;"	f
generate_client_rpc_wrapper	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func generate_client_rpc_wrapper(out io.Writer, fun *ast.FuncDecl, name string, argcnt, replycnt/;"	f	package:main
generate_server_rpc_wrapper	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func generate_server_rpc_wrapper(out io.Writer, fun *ast.FuncDecl, name string, argcnt, replycnt/;"	f	package:main
generate_struct_wrapper	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func generate_struct_wrapper(out io.Writer, fun *ast.FieldList, structname, name string) int {$/;"	f	package:main	typeref:typename:int
generate_ycm_conf	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^def generate_ycm_conf(flags, config_file):$/;"	f
get	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func (c *decl_cache) get(filename string) *decl_file_cache {$/;"	f	struct:main.decl_cache	typeref:typename:*decl_file_cache
getMap	vim_configurationfile/.vim/plugged/gocode/_testing/test.0022/test.go.in	/^func getMap() map[string]os.Error {$/;"	f	package:main	typeref:typename:map[string]os.Error
get_and_update	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func (c *decl_cache) get_and_update(filename string) *decl_file_cache {$/;"	f	struct:main.decl_cache	typeref:typename:*decl_file_cache
get_appdata_folder_path	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^func get_appdata_folder_path() string {$/;"	f	package:main	typeref:typename:string
get_array_len	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func get_array_len(e ast.Expr) string {$/;"	f	package:main	typeref:typename:string
get_array_len	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func get_array_len(e ast.Expr) string {$/;"	f	package:main	typeref:typename:string
get_candidates_from_decl	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) get_candidates_from_decl(cc cursor_context, class decl_class, b /;"	f	struct:main.auto_complete_context
get_candidates_from_set	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) get_candidates_from_set(set map[string]*decl, partial string, cl/;"	f	struct:main.auto_complete_context
get_executable_filename	vim_configurationfile/.vim/plugged/gocode/os_posix.go	/^func get_executable_filename() string {$/;"	f	package:main	typeref:typename:string
get_executable_filename	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^func get_executable_filename() string {$/;"	f	package:main	typeref:typename:string
get_formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^func get_formatter(name string) formatter {$/;"	f	package:main	typeref:typename:formatter
get_other_package_files	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func get_other_package_files(filename, packageName string, declcache *decl_cache) []*decl_file_c/;"	f	package:main	typeref:typename:[]*decl_file_cache
get_socket_filename	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^func get_socket_filename() string {$/;"	f	package:main	typeref:typename:string
get_type_path	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func get_type_path(e ast.Expr) (r type_path) {$/;"	f	package:main	typeref:typename:(r type_path)
go-autocomplete	vim_configurationfile/.vim/plugged/gocode/emacs/go-autocomplete.el	/^(defgroup go-autocomplete nil$/;"	f
go_build_context	vim_configurationfile/.vim/plugged/gocode/utils.go	/^type go_build_context struct {$/;"	s	package:main
gocomplete#Complete	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! gocomplete#Complete(findstart, base)$/;"	f
godit	vim_configurationfile/.vim/plugged/gocode/docs/autocomplete_formats.md	/^## godit ##$/;"	s
godit_formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^type godit_formatter struct{}$/;"	s	package:main
gutentags#add_job	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_io_cb	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_io_cb(chan, msg) abort$/;"	f
gutentags#error	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#remove_job	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	vim_configurationfile/.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
has_prefix	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func has_prefix(s, prefix string, ignorecase bool) bool {$/;"	f	package:main	typeref:typename:bool
head	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^const head = `\/\/ WARNING! Autogenerated by goremote, don't touch.$/;"	c	package:main
hosts	vim_configurationfile/.vim/plugged/gocode/_testing/test.0008/test.go.in	/^var hosts struct {$/;"	v	package:main	typeref:typename:struct { sync.Mutex; data map[string][]string; time int64; path string;}
hosts	vim_configurationfile/.vim/plugged/gocode/_testing/test.0009/test.go.in	/^var hosts struct {$/;"	v	package:main	typeref:typename:struct { sync.Mutex; data map[string][]string; time int64; path string;}
i	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	i int$/;"	m	struct:main.anonymous_id_gen	typeref:typename:int
ignorecase	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	ignorecase bool$/;"	m	struct:main.out_buffers	typeref:typename:bool
import_data_parser	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^type import_data_parser struct {$/;"	s	package:main
import_data_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^type import_data_type struct {$/;"	s	package:main
in	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	in chan file_read_request$/;"	m	struct:main.file_reader_type	typeref:typename:chan file_read_request
index_predicate	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func index_predicate(v ast.Expr) bool {$/;"	f	package:main	typeref:typename:bool
infer_range_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func infer_range_type(e ast.Expr, sc *scope, valueindex int) (ast.Expr, *scope) {$/;"	f	package:main	typeref:typename:(ast.Expr, *scope)
infer_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) infer_type() (ast.Expr, *scope) {$/;"	f	struct:main.decl	typeref:typename:(ast.Expr, *scope)
infer_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func infer_type(v ast.Expr, scope *scope, index int) (ast.Expr, *scope, bool) {$/;"	f	package:main	typeref:typename:(ast.Expr, *scope, bool)
init	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) init(reader io.Reader) {$/;"	f	struct:main.import_data_parser
init	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func init() {$/;"	f	package:main
init	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) init(src io.Reader, pfc *package_file_cache) {$/;"	f	struct:main.gc_parser
install	vim_configurationfile/.vim/plugged/gocode/debian/rules	/^install:$/;"	t
is_nil	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (tp *type_path) is_nil() bool {$/;"	f	struct:main.type_path	typeref:typename:bool
json	vim_configurationfile/.vim/plugged/gocode/docs/autocomplete_formats.md	/^## json ###$/;"	s
json_formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^type json_formatter struct{}$/;"	s	package:main
kernel32	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^	kernel32 = syscall.NewLazyDLL("kernel32.dll")$/;"	v	package:main
list	vim_configurationfile/.vim/plugged/gocode/config.go	/^func (this *config) list() string {$/;"	f	struct:main.config	typeref:typename:string
list_option	vim_configurationfile/.vim/plugged/gocode/config.go	/^func (this *config) list_option(name string) string {$/;"	f	struct:main.config	typeref:typename:string
list_value	vim_configurationfile/.vim/plugged/gocode/config.go	/^func list_value(v reflect.Value, name string, w io.Writer) {$/;"	f	package:main
listener	vim_configurationfile/.vim/plugged/gocode/server.go	/^	listener     net.Listener$/;"	m	struct:main.daemon	typeref:typename:net.Listener
lit	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^	lit string$/;"	m	struct:main.token_item	typeref:typename:string
lit	vim_configurationfile/.vim/plugged/gocode/package.go	/^	lit           string$/;"	m	struct:main.gc_parser	typeref:typename:string
loaded_nerd_tree	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
localos	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^	localos "os"$/;"	P	package:os
localos	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^	localos "os"$/;"	P	package:os
log_build_context	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func log_build_context(context build.Context) {$/;"	f	package:main
log_found_package_maybe	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func log_found_package_maybe(imp, pkgpath string) {$/;"	f	package:main
lookup	vim_configurationfile/.vim/plugged/gocode/scope.go	/^func (s *scope) lookup(name string) *decl {$/;"	f	struct:main.scope	typeref:typename:*decl
lookup_path	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func lookup_path(tp type_path, scope *scope) *decl {$/;"	f	package:main	typeref:typename:*decl
lookup_pkg	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func lookup_pkg(tp type_path, scope *scope) string {$/;"	f	package:main	typeref:typename:string
loop	vim_configurationfile/.vim/plugged/gocode/server.go	/^func (this *daemon) loop() {$/;"	f	struct:main.daemon
main	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^def main():$/;"	f
main	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0001/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0001/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0002/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0002/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0003/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0004/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/b.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/b.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0007/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0007/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0008/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0008/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0009/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0009/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0010/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0010/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0011/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0011/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0012/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0012/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0013/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0013/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0014/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0014/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0015/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0015/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0016/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0016/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0017/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0017/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0018/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0019/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0019/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0020/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0021/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0021/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0022/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0022/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0023/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0023/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0024/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0024/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0025/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0025/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0026/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0026/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0027/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0027/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0028/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0028/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0029/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0029/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0030/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0030/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0031/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0031/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0032/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0032/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0033/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0034/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0035/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0035/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0036/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0036/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0037/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0037/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0038/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0038/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0039/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0039/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0040/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0041/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0042/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0043/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0044/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0044/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0045/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0045/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0046/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0046/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0048/test.go.in	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/_testing/test.0048/test.go.in	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/client.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/config.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/decl.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^func main() {$/;"	f	package:main
main	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/os_posix.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/package.go	/^	main   *decl \/\/ package declaration$/;"	m	struct:main.package_file_cache	typeref:typename:*decl
main	vim_configurationfile/.vim/plugged/gocode/package.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/rpc.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/scope.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/server.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/gocode/utils.go	/^package main$/;"	p
main	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^def main(host, port, keepalive, command, *args):$/;"	f
make sure gocode server isn't running	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^# make sure gocode server isn't running$/;"	c
make_decl_set	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) make_decl_set(scope *scope) map[string]*decl {$/;"	f	struct:main.auto_complete_context	typeref:typename:map[string]*decl
make_decl_set_recursive	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func make_decl_set_recursive(set map[string]*decl, scope *scope) {$/;"	f	package:main
make_expr	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func make_expr(tokens []token_item) []byte {$/;"	f	package:main	typeref:typename:[]byte
matches	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) matches() bool {$/;"	f	struct:main.decl	typeref:typename:bool
merge_decl	vim_configurationfile/.vim/plugged/gocode/scope.go	/^func (s *scope) merge_decl(d *decl) {$/;"	f	struct:main.scope
merge_decls	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) merge_decls() {$/;"	f	struct:main.auto_complete_context
merge_decls	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func merge_decls(filescope *scope, pkg *scope, decls map[string]*decl) {$/;"	f	package:main
merge_decls_from_packages	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func merge_decls_from_packages(pkgscope *scope, pkgs []package_import, pcache package_cache) {$/;"	f	package:main
method_of	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func method_of(d ast.Decl) string {$/;"	f	package:main	typeref:typename:string
mtime	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	mtime int64  \/\/ last modification time$/;"	m	struct:main.decl_file_cache	typeref:typename:int64
mtime	vim_configurationfile/.vim/plugged/gocode/package.go	/^	mtime    int64$/;"	m	struct:main.package_file_cache	typeref:typename:int64
name	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^	name  string$/;"	m	struct:main.import_data_type	typeref:typename:string
name	vim_configurationfile/.vim/plugged/gocode/_testing/test.0027/test.go.in	/^	name string$/;"	m	struct:main.file	typeref:typename:string
name	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	name         string$/;"	m	struct:main.auto_complete_file	typeref:typename:string
name	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	name  string$/;"	m	struct:main.decl	typeref:typename:string
name	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	name string$/;"	m	struct:main.type_path	typeref:typename:string
name	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	name  string \/\/ file name$/;"	m	struct:main.decl_file_cache	typeref:typename:string
name	vim_configurationfile/.vim/plugged/gocode/package.go	/^	name     string \/\/ file name$/;"	m	struct:main.package_file_cache	typeref:typename:string
names	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	names  []*ast.Ident$/;"	m	struct:main.decl_pack	typeref:typename:[]*ast.Ident
nerdtree#checkForBrowse	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
nerdtree#compareNodes	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#completeBookmarks	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#deprecated	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#echo	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#exec	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd)$/;"	f
nerdtree#has_opt	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#renderView	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
nerdtree#runningCygwin	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin()$/;"	f
nerdtree#runningWindows	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#ui_glue#bookmarkNode	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
nerdtree#ui_glue#chRootCwd	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
nerdtree#ui_glue#createDefaultBindings	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
nerdtree#ui_glue#invokeKeyMap	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
nerdtree#ui_glue#openBookmark	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
nerdtree#ui_glue#revealBookmark	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
nerdtree#ui_glue#setupCommands	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
nerdtree#ui_glue#upDir	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState)$/;"	f
nerdtree#version	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version()$/;"	f
new_auto_complete_context	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func new_auto_complete_context(pcache package_cache, declcache *decl_cache) *auto_complete_conte/;"	f	package:main	typeref:typename:*auto_complete_context
new_auto_complete_file	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func new_auto_complete_file(name string, context build.Context) *auto_complete_file {$/;"	f	package:main	typeref:typename:*auto_complete_file
new_daemon	vim_configurationfile/.vim/plugged/gocode/server.go	/^func new_daemon(network, address string) *daemon {$/;"	f	package:main	typeref:typename:*daemon
new_decl	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func new_decl(name string, class decl_class, scope *scope) *decl {$/;"	f	package:main	typeref:typename:*decl
new_decl_cache	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func new_decl_cache(context build.Context) *decl_cache {$/;"	f	package:main	typeref:typename:*decl_cache
new_decl_file_cache	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func new_decl_file_cache(name string, context build.Context) *decl_file_cache {$/;"	f	package:main	typeref:typename:*decl_file_cache
new_decl_full	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func new_decl_full(name string, class decl_class, flags decl_flags, typ, v ast.Expr, vi int, s */;"	f	package:main	typeref:typename:*decl
new_decl_var	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func new_decl_var(name string, typ ast.Expr, value ast.Expr, vindex int, scope *scope) *decl {$/;"	f	package:main	typeref:typename:*decl
new_file_reader	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func new_file_reader() *file_reader_type {$/;"	f	package:main	typeref:typename:*file_reader_type
new_out_buffers	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func new_out_buffers(ctx *auto_complete_context) *out_buffers {$/;"	f	package:main	typeref:typename:*out_buffers
new_package_cache	vim_configurationfile/.vim/plugged/gocode/package.go	/^func new_package_cache() package_cache {$/;"	f	package:main	typeref:typename:package_cache
new_package_file_cache	vim_configurationfile/.vim/plugged/gocode/package.go	/^func new_package_file_cache(name string) *package_file_cache {$/;"	f	package:main	typeref:typename:*package_file_cache
new_package_file_cache_forever	vim_configurationfile/.vim/plugged/gocode/package.go	/^func new_package_file_cache_forever(name, defalias string) *package_file_cache {$/;"	f	package:main	typeref:typename:*package_file_cache
new_scope	vim_configurationfile/.vim/plugged/gocode/scope.go	/^func new_scope(outer *scope) *scope {$/;"	f	package:main	typeref:typename:*scope
new_token_iterator	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func new_token_iterator(src []byte, cursor int) token_iterator {$/;"	f	package:main	typeref:typename:token_iterator
next	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) next() {$/;"	f	struct:main.import_data_parser
next	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) next() {$/;"	f	struct:main.gc_parser
next	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^func (this *tok_collection) next(s *scanner.Scanner) bool {$/;"	f	struct:main.tok_collection	typeref:typename:bool
nice	vim_configurationfile/.vim/plugged/gocode/docs/autocomplete_formats.md	/^## nice ##$/;"	s
nice_formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^type nice_formatter struct{}$/;"	s	package:main
noop	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^def noop():$/;"	f
o	vim_configurationfile/.vim/autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
off	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^	off int$/;"	m	struct:main.token_item	typeref:typename:int
offset	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) offset(p token.Pos) int {$/;"	f	struct:main.auto_complete_file	typeref:typename:int
ok	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^ok = 0$/;"	v
others	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	others  []*decl_file_cache  \/\/ other files of the current package$/;"	m	struct:main.auto_complete_context	typeref:typename:[]*decl_file_cache
others	vim_configurationfile/.vim/plugged/gocode/package.go	/^	others map[string]*decl$/;"	m	struct:main.package_file_cache	typeref:typename:map[string]*decl
out	vim_configurationfile/.vim/plugged/gocode/utils.go	/^	out      chan file_read_response$/;"	m	struct:main.file_read_request	typeref:typename:chan file_read_response
out_buffers	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^type out_buffers struct {$/;"	s	package:main
override_dh_auto_install	vim_configurationfile/.vim/plugged/gocode/debian/rules	/^override_dh_auto_install: install$/;"	t
p	vim_configurationfile/.vim/plugged/gocode/_testing/test.0047/test.go.in	/^package p$/;"	p
p	vim_configurationfile/.vim/plugged/gocode/_testing/test.0049/test.go.in	/^package p$/;"	p
p	vim_configurationfile/.vim/plugged/gocode/_testing/test.0050/test.go.in	/^package p$/;"	p
pack_build_context	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func pack_build_context(ctx *build.Context) go_build_context {$/;"	f	package:main	typeref:typename:go_build_context
package_cache	vim_configurationfile/.vim/plugged/gocode/package.go	/^type package_cache map[string]*package_file_cache$/;"	t	package:main	typeref:typename:map[string]*package_file_cache
package_file_cache	vim_configurationfile/.vim/plugged/gocode/package.go	/^type package_file_cache struct {$/;"	s	package:main
package_import	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^type package_import struct {$/;"	s	package:main
package_name	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	package_name string$/;"	m	struct:main.auto_complete_file	typeref:typename:string
package_name	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func package_name(file *ast.File) string {$/;"	f	package:main	typeref:typename:string
packages	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	packages  []package_import$/;"	m	struct:main.auto_complete_file	typeref:typename:[]package_import
packages	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	packages  []package_import \/\/ import information$/;"	m	struct:main.decl_file_cache	typeref:typename:[]package_import
parent	vim_configurationfile/.vim/plugged/gocode/scope.go	/^	parent   *scope \/\/ nil for universe scope$/;"	m	struct:main.scope	typeref:typename:*scope
parse_array_or_slice_type	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_array_or_slice_type() ast.Expr {$/;"	f	struct:main.gc_parser	typeref:typename:ast.Expr
parse_chan_type	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_chan_type() ast.Expr {$/;"	f	struct:main.gc_parser	typeref:typename:ast.Expr
parse_const_decl	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_const_decl() (string, *ast.GenDecl) {$/;"	f	struct:main.gc_parser	typeref:typename:(string, *ast.GenDecl)
parse_decl	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_decl() (pkg string, decl ast.Decl) {$/;"	f	struct:main.gc_parser	typeref:typename:(pkg string, decl ast.Decl)
parse_decl_list	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func parse_decl_list(fset *token.FileSet, data []byte) ([]ast.Decl, error) {$/;"	f	package:main	typeref:typename:([]ast.Decl, error)
parse_dot_ident	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_dot_ident() string {$/;"	f	struct:main.gc_parser	typeref:typename:string
parse_export	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_export(callback func(string, ast.Decl)) {$/;"	f	struct:main.gc_parser
parse_exported_name	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_exported_name() *ast.SelectorExpr {$/;"	f	struct:main.gc_parser	typeref:typename:*ast.SelectorExpr
parse_field	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_field() *ast.Field {$/;"	f	struct:main.gc_parser	typeref:typename:*ast.Field
parse_flags	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^def parse_flags(build_log):$/;"	f
parse_func_body	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_func_body() {$/;"	f	struct:main.gc_parser
parse_func_decl	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_func_decl() (string, *ast.FuncDecl) {$/;"	f	struct:main.gc_parser	typeref:typename:(string, *ast.FuncDecl)
parse_import_data	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func parse_import_data(data []byte) {$/;"	f	package:main
parse_import_decl	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_import_decl() {$/;"	f	struct:main.gc_parser
parse_int	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_int() {$/;"	f	struct:main.gc_parser
parse_interface_type	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_interface_type() ast.Expr {$/;"	f	struct:main.gc_parser	typeref:typename:ast.Expr
parse_map_type	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_map_type() ast.Expr {$/;"	f	struct:main.gc_parser	typeref:typename:ast.Expr
parse_method_decl	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_method_decl() (string, *ast.FuncDecl) {$/;"	f	struct:main.gc_parser	typeref:typename:(string, *ast.FuncDecl)
parse_method_or_embed_spec	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_method_or_embed_spec() *ast.Field {$/;"	f	struct:main.gc_parser	typeref:typename:*ast.Field
parse_name	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_name() (string, ast.Expr) {$/;"	f	struct:main.gc_parser	typeref:typename:(string, ast.Expr)
parse_number	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_number() {$/;"	f	struct:main.gc_parser
parse_package	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_package() *ast.Ident {$/;"	f	struct:main.gc_parser	typeref:typename:*ast.Ident
parse_parameter	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_parameter() *ast.Field {$/;"	f	struct:main.gc_parser	typeref:typename:*ast.Field
parse_parameters	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_parameters() *ast.FieldList {$/;"	f	struct:main.gc_parser	typeref:typename:*ast.FieldList
parse_signature	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_signature() *ast.FuncType {$/;"	f	struct:main.gc_parser	typeref:typename:*ast.FuncType
parse_struct_type	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_struct_type() ast.Expr {$/;"	f	struct:main.gc_parser	typeref:typename:ast.Expr
parse_type	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_type() ast.Expr {$/;"	f	struct:main.gc_parser	typeref:typename:ast.Expr
parse_type_decl	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_type_decl() (string, *ast.GenDecl) {$/;"	f	struct:main.gc_parser	typeref:typename:(string, *ast.GenDecl)
parse_var_decl	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (p *gc_parser) parse_var_decl() (string, *ast.GenDecl) {$/;"	f	struct:main.gc_parser	typeref:typename:(string, *ast.GenDecl)
partial	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^	partial string$/;"	m	struct:main.cursor_context	typeref:typename:string
path	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^	path  string$/;"	m	struct:main.package_import	typeref:typename:string
path_and_alias	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func path_and_alias(imp *ast.ImportSpec) (string, string) {$/;"	f	package:main	typeref:typename:(string, string)
path_to_alias	vim_configurationfile/.vim/plugged/gocode/package.go	/^	path_to_alias map[string]string$/;"	m	struct:main.gc_parser	typeref:typename:map[string]string
pcache	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	pcache    package_cache \/\/ packages cache$/;"	m	struct:main.auto_complete_context	typeref:typename:package_cache
pfc	vim_configurationfile/.vim/plugged/gocode/package.go	/^	pfc           *package_file_cache$/;"	m	struct:main.gc_parser	typeref:typename:*package_file_cache
pkg	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	pkg     *scope$/;"	m	struct:main.auto_complete_context	typeref:typename:*scope
pkg	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	pkg  string$/;"	m	struct:main.type_path	typeref:typename:string
pkgcache	vim_configurationfile/.vim/plugged/gocode/server.go	/^	pkgcache     package_cache$/;"	m	struct:main.daemon	typeref:typename:package_cache
plug#	vim_configurationfile/.vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	vim_configurationfile/.vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	vim_configurationfile/.vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	vim_configurationfile/.vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	vim_configurationfile/.vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
poll	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^    def poll(self):$/;"	m	class:Connection
pos	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^	pos token.Pos$/;"	m	struct:main.tok_pos_pair	typeref:typename:token.Pos
prefix	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^const prefix = "server_"$/;"	c	package:main
prepare_file_filename_cursor	vim_configurationfile/.vim/plugged/gocode/client.go	/^func prepare_file_filename_cursor() ([]byte, string, int) {$/;"	f	package:main	typeref:typename:([]byte, string, int)
pretty_print_func_field_list	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func pretty_print_func_field_list(out io.Writer, f *ast.FieldList) int {$/;"	f	package:main	typeref:typename:int
pretty_print_func_field_list	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func pretty_print_func_field_list(out io.Writer, f *ast.FieldList) int {$/;"	f	package:main	typeref:typename:int
pretty_print_func_field_list	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func pretty_print_func_field_list(out io.Writer, f *ast.FieldList) int {$/;"	f	package:main	typeref:typename:int
pretty_print_func_field_list_using_args	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func pretty_print_func_field_list_using_args(out io.Writer, f *ast.FieldList) int {$/;"	f	package:main	typeref:typename:int
pretty_print_type	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (d *decl) pretty_print_type(out io.Writer) {$/;"	f	struct:main.decl
pretty_print_type_expr	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func pretty_print_type_expr(out io.Writer, e ast.Expr) {$/;"	f	package:main
pretty_print_type_expr	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func pretty_print_type_expr(out io.Writer, e ast.Expr) {$/;"	f	package:main
pretty_print_type_expr	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func pretty_print_type_expr(out io.Writer, e ast.Expr) {$/;"	f	package:main
previous_token	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (this *token_iterator) previous_token() bool {$/;"	f	struct:main.token_iterator	typeref:typename:bool
print_backtrace	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func print_backtrace(err interface{}) {$/;"	f	package:main
print_fail_report	vim_configurationfile/.vim/plugged/gocode/_testing/run.rb	/^def print_fail_report(t, out, outexpected)$/;"	f
print_fail_report	vim_configurationfile/.vim/plugged/gocode/_testing/run.tcl	/^proc print_fail_report {t out expected} {$/;"	p
print_pass_report	vim_configurationfile/.vim/plugged/gocode/_testing/run.rb	/^def print_pass_report(t)$/;"	f
print_pass_report	vim_configurationfile/.vim/plugged/gocode/_testing/run.tcl	/^proc print_pass_report {t} {$/;"	p
print_stats	vim_configurationfile/.vim/plugged/gocode/_testing/run.rb	/^def print_stats$/;"	f
print_stats	vim_configurationfile/.vim/plugged/gocode/_testing/run.tcl	/^proc print_stats {} {$/;"	p
proc_get_module_file_name	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^	proc_get_module_file_name = kernel32.NewProc("GetModuleFileNameW")$/;"	v	package:main
proc_sh_get_folder_path	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^	proc_sh_get_folder_path   = shell32.NewProc("SHGetFolderPathW")$/;"	v	package:main
process_assign_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_assign_stmt(a *ast.AssignStmt) {$/;"	f	struct:main.auto_complete_file
process_block_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_block_stmt(block *ast.BlockStmt) {$/;"	f	struct:main.auto_complete_file
process_data	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_data(data []byte) {$/;"	f	struct:main.auto_complete_file
process_data	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func (f *decl_file_cache) process_data(data []byte) {$/;"	f	struct:main.decl_file_cache
process_decl	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_decl(decl ast.Decl) {$/;"	f	struct:main.auto_complete_file
process_decl_locals	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_decl_locals(decl ast.Decl) {$/;"	f	struct:main.auto_complete_file
process_field_list	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_field_list(field_list *ast.FieldList, s *scope) {$/;"	f	struct:main.auto_complete_file
process_file	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func process_file(out io.Writer, filename string) {$/;"	f	package:main
process_package_data	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (m *package_file_cache) process_package_data(data []byte) {$/;"	f	struct:main.package_file_cache
process_range_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_range_stmt(a *ast.RangeStmt) {$/;"	f	struct:main.auto_complete_file
process_select_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_select_stmt(a *ast.SelectStmt) {$/;"	f	struct:main.auto_complete_file
process_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_stmt(stmt ast.Stmt) {$/;"	f	struct:main.auto_complete_file
process_switch_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_switch_stmt(a *ast.SwitchStmt) {$/;"	f	struct:main.auto_complete_file
process_type_switch_stmt	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^func (f *auto_complete_file) process_type_switch_stmt(a *ast.TypeSwitchStmt) {$/;"	f	struct:main.auto_complete_file
q	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	vim_configurationfile/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	noremap <silent> <buffer> q :call <SID>quickmenu_close()<cr>$/;"	m
quickmenu	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^	augroup quickmenu$/;"	a
quickmenu#append	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! quickmenu#append(text, event, ...)$/;"	f
quickmenu#bottom	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! quickmenu#bottom(mid)$/;"	f
quickmenu#current	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! quickmenu#current(mid)$/;"	f
quickmenu#header	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! quickmenu#header(header)$/;"	f
quickmenu#list	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! quickmenu#list()$/;"	f
quickmenu#reset	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! quickmenu#reset()$/;"	f
quickmenu#toggle	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! quickmenu#toggle(mid) abort$/;"	f
quickmenu_close	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! <SID>quickmenu_close()$/;"	f
quickmenu_enter	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! <SID>quickmenu_enter() abort$/;"	f
quickmenu_execute	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! <SID>quickmenu_execute(index) abort$/;"	f
quickmenu_max_width (integer)	vim_configurationfile/.vim/plugged/quickmenu.vim/README.md	/^#### quickmenu_max_width (integer)$/;"	t
range_predicate	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func range_predicate(v ast.Expr) bool {$/;"	f	package:main	typeref:typename:bool
read	vim_configurationfile/.vim/plugged/gocode/config.go	/^func (this *config) read() error {$/;"	f	struct:main.config	typeref:typename:error
read_array_or_slice_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_array_or_slice_type() ast.Expr {$/;"	f	struct:main.import_data_parser	typeref:typename:ast.Expr
read_chan_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_chan_type() ast.Expr {$/;"	f	struct:main.import_data_parser	typeref:typename:ast.Expr
read_checksum	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_checksum() {$/;"	f	struct:main.import_data_parser
read_const	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_const() {$/;"	f	struct:main.import_data_parser
read_field	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_field() *ast.Field {$/;"	f	struct:main.import_data_parser	typeref:typename:*ast.Field
read_file	vim_configurationfile/.vim/plugged/gocode/_testing/run.tcl	/^proc read_file {filename} {$/;"	p
read_file	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func (f *decl_file_cache) read_file() {$/;"	f	struct:main.decl_file_cache
read_file	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func (this *file_reader_type) read_file(filename string) ([]byte, error) {$/;"	f	struct:main.file_reader_type	typeref:typename:([]byte, error)
read_func	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_func() {$/;"	f	struct:main.import_data_parser
read_func_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_func_type() *ast.FuncType {$/;"	f	struct:main.import_data_parser	typeref:typename:*ast.FuncType
read_ident	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_ident() string {$/;"	f	struct:main.import_data_parser	typeref:typename:string
read_import_data	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func read_import_data(import_path string) ([]byte, error) {$/;"	f	package:main	typeref:typename:([]byte, error)
read_int	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_int() string {$/;"	f	struct:main.import_data_parser	typeref:typename:string
read_interface_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_interface_type() ast.Expr {$/;"	f	struct:main.import_data_parser	typeref:typename:ast.Expr
read_map_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_map_type() ast.Expr {$/;"	f	struct:main.import_data_parser	typeref:typename:ast.Expr
read_method	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_method() {$/;"	f	struct:main.import_data_parser
read_method_or_embed_spec	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_method_or_embed_spec() *ast.Field {$/;"	f	struct:main.import_data_parser	typeref:typename:*ast.Field
read_parameter	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_parameter() *ast.Field {$/;"	f	struct:main.import_data_parser	typeref:typename:*ast.Field
read_parameters	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_parameters() *ast.FieldList {$/;"	f	struct:main.import_data_parser	typeref:typename:*ast.FieldList
read_struct_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_struct_type() ast.Expr {$/;"	f	struct:main.import_data_parser	typeref:typename:ast.Expr
read_type	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_type() ast.Expr {$/;"	f	struct:main.import_data_parser	typeref:typename:ast.Expr
read_type_decl	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_type_decl() {$/;"	f	struct:main.import_data_parser
read_type_full	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_type_full() (ast.Expr, string) {$/;"	f	struct:main.import_data_parser	typeref:typename:(ast.Expr, string)
read_var	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) read_var() {$/;"	f	struct:main.import_data_parser
receive	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^    def receive(self, char=None):$/;"	m	class:Connection
replace_decl	vim_configurationfile/.vim/plugged/gocode/scope.go	/^func (s *scope) replace_decl(name string, d *decl) {$/;"	f	struct:main.scope
rip_off_decl	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^func (this *tok_collection) rip_off_decl(file []byte, cursor int) (int, []byte, []byte) {$/;"	f	struct:main.tok_collection	typeref:typename:(int, []byte, []byte)
rip_off_decl	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^func rip_off_decl(file []byte, cursor int) (int, []byte, []byte) {$/;"	f	package:main	typeref:typename:(int, []byte, []byte)
run	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^    def run(cmd, *args, **kwargs):$/;"	f	function:fake_build	file:
run_test	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^def run_test(t):$/;"	f
run_test	vim_configurationfile/.vim/plugged/gocode/_testing/run.rb	/^def run_test(t)$/;"	f
run_test	vim_configurationfile/.vim/plugged/gocode/_testing/run.tcl	/^proc run_test {t} {$/;"	p
s:Bookmark	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.Edit	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
s:Bookmark.GetNodeForName	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:Connect	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Connect(...) abort$/;"	f
s:CreateTabTreeVCS	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
s:Creator	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:Doc	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Doc(symbol) abort$/;"	f
s:Edit	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Edit(cmd, keyword) abort$/;"	f
s:Eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Eval(bang, line1, line2, count, args) abort$/;"	f
s:Event	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:Find	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Find(find, edit) abort$/;"	f
s:FindParentVCSRoot	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
s:FlagSet	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:GenerateConfig	vim_configurationfile/.vim/plugged/YCM-Generator/plugin/ycm-generator.vim	/^function! s:GenerateConfig(fmt, overwrite, flags)$/;"	f
s:K	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:K() abort$/;"	f
s:KeyMap	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Compare	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
s:KeyMap.Create	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:Last	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Last(bang, count) abort$/;"	f
s:Lookup	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Lookup(ns, macro, arg) abort$/;"	f
s:MenuController	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.isMinimal	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
s:MenuController.showMenu	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:NERDTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CloseIfQuitOnOpen	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
s:NERDTree.CursorToBookmarkTable	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
s:NERDTree.ExistsForBuf	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:Notifier	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:Opener	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:Path	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.Slash	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Slash()$/;"	f
s:Path.WinToUnixPath	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.addDelimiter	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
s:Path.bookmarkNames	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.compareTo	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.compareTo(path)$/;"	f
s:Path.copy	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(path)$/;"	f
s:Path.isHiddenUnder	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(path)$/;"	f
s:Path.isUnixHiddenFile	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:Require	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:Require(bang, echo, ns) abort$/;"	f
s:RunTests	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:RunTests(bang, count, ...) abort$/;"	f
s:SID	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function s:SID()$/;"	f
s:TYPE	vim_configurationfile/.vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TreeDirNode	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getCascadeRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
s:TreeDirNode.getChild	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getDirChildren	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
s:TreeDirNode.getVisibleChildCount	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findSibling	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openInNewTab	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:UI	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
s:UI.getPath	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:_handleOldOptions	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:abs	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:abs(v)$/;"	f
s:activateAll	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll()$/;"	f
s:activateBookmark	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
s:activateDirNode	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode)$/;"	f
s:activateFileNode	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
s:actually_input	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:actually_input(...) abort$/;"	f
s:add_db	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_pprint_opts	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:add_pprint_opts(msg) abort$/;"	f
s:added_db_files	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:align	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:align(bang, live, visualmode, first_line, last_line, expr)$/;"	f
s:alternating_modes	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:alternating_modes(mode)$/;"	f
s:append_ul	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:ask	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:atoi	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:atoi(str)$/;"	f
s:bang	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_spec	vim_configurationfile/.vim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:bottom_popup	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:bottom_popup(items, header)$/;"	f
s:bottom_render	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:bottom_render(items, header)$/;"	f
s:buf	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:buf() abort$/;"	f
s:buffer_path	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:buffer_path(...) abort$/;"	f
s:build_dict	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:build_dict(delimiters, ch, regexp, opts)$/;"	f
s:build_mode_sequence	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:build_mode_sequence(expr, recur)$/;"	f
s:cache_project_root	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:candidate	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:candidate(val) abort$/;"	f
s:ceil2	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:ceil2(v)$/;"	f
s:chCwd	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node)$/;"	f
s:chRoot	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node)$/;"	f
s:check_ruby	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chsh	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:closeChildren	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
s:closeCurrentDir	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
s:closeTreeWindow	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
s:cmdmsg	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:cmdmsg(content, highlight)$/;"	f
s:cmdwinenter	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:cmdwinenter() abort$/;"	f
s:cmdwinleave	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:cmdwinleave() abort$/;"	f
s:col	vim_configurationfile/.vim/plugged/quickmenu.vim/syntax/quickmenu.vim	/^	let s:col = len(s:padding_left) + 4$/;"	v
s:compact_options	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:compact_options(opts)$/;"	f
s:compare_git_uri	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:config_gen	vim_configurationfile/.vim/plugged/YCM-Generator/plugin/ycm-generator.vim	/^let s:config_gen = expand("<sfile>:p:h:h") . "\/config_gen.py"$/;"	v
s:conn_try	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:conn_try(connection, function, ...) abort$/;"	f
s:connect_complete	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:connect_complete(A, L, P) abort$/;"	f
s:cpo_save	vim_configurationfile/.vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:cpo_save = &cpo$/;"	v
s:define_commands	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:delete	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:deleteBookmark	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark)$/;"	f
s:delete_op	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:did_check_exe	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:dirArrows	vim_configurationfile/.vim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpand/;"	v
s:dirpath	vim_configurationfile/.vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:displayHelp	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp()$/;"	f
s:do	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do_align	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:do_align(todo, modes, all_tokens, all_delims, fl, ll, fc, lc, nth, recur, dict)$/;"	f
s:doautocmd	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:easy_align_delimiters_default	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:easy_align_delimiters_default = {$/;"	v
s:easy_align_op	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:easy_align_op(type, ...)$/;"	f
s:easy_align_repeat	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:easy_align_repeat()$/;"	f
s:echon	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:echon(l, n, r, d, o, warn)$/;"	f
s:echon_	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:echon_(tokens)$/;"	f
s:editop	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:editop(type) abort$/;"	f
s:err	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:errmsg	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:errmsg(msg)$/;"	f
s:esc	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escrtp	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:eval(expr, ...) abort$/;"	f
s:exit	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:exit(msg)$/;"	f
s:expand_text	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:expand_text(string) abort$/;"	f
s:extract_last_stacktrace	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:extract_last_stacktrace(nrepl, session) abort$/;"	f
s:extract_name	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:filterop	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:filterop(type) abort$/;"	f
s:findAndRevealPath	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr)$/;"	f
s:find_name	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:finish	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_rtp	vim_configurationfile/.vim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:floor2	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:floor2(v)$/;"	f
s:format_git_log	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:function	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:function(name) abort$/;"	f
s:function	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:function(name) abort$/;"	f
s:fuzzy_lu	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:fuzzy_lu(key)$/;"	f
s:generate_wildignore_options	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:generic_easy_align_op	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:generic_easy_align_op(type, vmode, live)$/;"	f
s:get_complete_context	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:get_complete_context() abort$/;"	f
s:get_ctags_executable	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:git_validate	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:gocodeAutocomplete	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! s:gocodeAutocomplete()$/;"	f
s:gocodeCommand	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! s:gocodeCommand(cmd, preargs, args)$/;"	f
s:gocodeCurrentBuffer	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! s:gocodeCurrentBuffer()$/;"	f
s:gocodeCurrentBufferOpt	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! s:gocodeCurrentBufferOpt(filename)$/;"	f
s:gocodeCursor	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! s:gocodeCursor()$/;"	f
s:gocodeShellescape	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! s:gocodeShellescape(arg)$/;"	f
s:handleLeftClick	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
s:handleMiddleMouse	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
s:hash_match	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:highlight	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:highlight(standard, startify)$/;"	f
s:highlighted_as	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:highlighted_as(line, col, groups)$/;"	f
s:history	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  let s:history = []$/;"	v
s:histswap	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:histswap(list) abort$/;"	f
s:hllink	vim_configurationfile/.vim/plugged/quickmenu.vim/syntax/quickmenu.vim	/^function! s:hllink(name, dest, alternative)$/;"	f
s:id	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^  let s:id = 0$/;"	v
s:id	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^  let s:id = 0$/;"	v
s:id	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:id() abort$/;"	f
s:ignored_syntax	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:ignored_syntax()$/;"	f
s:includes_file	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:includes_file(file, path) abort$/;"	f
s:infer_properties	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:initVariable	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
s:input	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:input(str, default, vis)$/;"	f
s:input	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:input(default) abort$/;"	f
s:inputPrompt	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
s:inputclose	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:inputclose() abort$/;"	f
s:inputeval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:inputeval() abort$/;"	f
s:inputlist	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:inputlist(label, entries) abort$/;"	f
s:install	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:interactive	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:interactive(range, modes, n, d, opts, rules, vis, bvis)$/;"	f
s:interactive_modes	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:interactive_modes(bang)$/;"	f
s:is_local_plug	vim_configurationfile/.vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_preview_window_open	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_updated	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	vim_configurationfile/.vim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:iskeyword	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:iskeyword = '[[:alnum:]_=?!#$%&*+|.\/<>:-]'$/;"	v
s:jar_contents	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:jar_contents = {}$/;"	v
s:job_abort	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:jumpToChild	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last)$/;"	f
s:jumpToFirstChild	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
s:jumpToLastChild	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
s:jumpToNextSibling	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
s:jumpToParent	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
s:jumpToPrevSibling	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
s:jumpToRoot	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
s:jumpToSibling	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward)$/;"	f
s:keepalive	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^let s:keepalive = tempname()$/;"	v
s:keepalive	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^let s:keepalive = tempname()$/;"	v
s:keyMaps	vim_configurationfile/.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:known_files	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_options	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:known_options = {$/;"	v
s:known_projects	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_command	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^let s:last_command = 'EasyAlign'$/;"	v
s:last_non_empty_line	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_rtp	vim_configurationfile/.vim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:last_wildignores	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:lastline	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lazy	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lines	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:live_easy_align_op	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:live_easy_align_op(type, ...)$/;"	f
s:load_plugin	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	vim_configurationfile/.vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:ltrim	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:ltrim(str)$/;"	f
s:mac_gui	vim_configurationfile/.vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:macroexpand1op	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:macroexpand1op(type) abort$/;"	f
s:macroexpandop	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:macroexpandop(type) abort$/;"	f
s:manual_update_tags	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:map(mode, lhs, rhs, ...) abort$/;"	f
s:massage_quickfix	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:massage_quickfix() abort$/;"	f
s:me	vim_configurationfile/.vim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:menu_expand	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:menu_expand(item) abort$/;"	f
s:mode_labels	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:mode_labels = { 'l': '', 'r': '[R]', 'c': '[C]' }$/;"	v
s:names	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:new_window	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:normalize_options	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:normalize_options(opts)$/;"	f
s:nrepl	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^let s:nrepl = {$/;"	v
s:nrepl_call	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_call(msg, ...) dict abort$/;"	f
s:nrepl_clone	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_clone() dict abort$/;"	f
s:nrepl_close	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_close() dict abort$/;"	f
s:nrepl_eval	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_eval(expr, ...) dict abort$/;"	f
s:nrepl_has_op	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_has_op(op) dict abort$/;"	f
s:nrepl_message	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_message(msg, ...) dict abort$/;"	f
s:nrepl_path	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_path() dict abort$/;"	f
s:nrepl_prepare	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_prepare(msg) dict abort$/;"	f
s:nrepl_process	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:nrepl_process(msg) dict abort$/;"	f
s:nrepl_transport	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^let s:nrepl_transport = {$/;"	v
s:nrepl_transport_call	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:nrepl_transport_call(msg, terms, sels, ...) dict abort$/;"	f
s:nrepl_transport_close	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:nrepl_transport_close() dict abort$/;"	f
s:nrepl_transport_command	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:nrepl_transport_command(cmd, args) dict abort$/;"	f
s:nrepl_transport_dispatch	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:nrepl_transport_dispatch(cmd, ...) dict abort$/;"	f
s:nrepl_transport_dispatch	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:nrepl_transport_dispatch(command, ...) dict abort$/;"	f
s:ns	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:ns(...) abort$/;"	f
s:nvim	vim_configurationfile/.vim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_job_exit_wrapper	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:old_cpo	vim_configurationfile/.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:oneoff	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff = {}$/;"	v
s:oneoff	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff.piggieback = s:oneoff.message$/;"	v
s:oneoff.eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:oneoff.eval(expr, options) dict abort$/;"	f
s:oneoff.message	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:oneoff.message(...) abort$/;"	f
s:oneoff.path	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:oneoff.path() dict abort$/;"	f
s:oneoff.user_ns	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:oneoff.user_ns() abort$/;"	f
s:oneoff_err	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff_err = tempname()$/;"	v
s:oneoff_ex	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff_ex  = tempname()$/;"	v
s:oneoff_in	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff_in  = tempname()$/;"	v
s:oneoff_out	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff_out = tempname()$/;"	v
s:oneoff_pr	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff_pr  = tempname()$/;"	v
s:oneoff_stk	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:oneoff_stk = tempname()$/;"	v
s:openExplorer	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
s:openHSplit	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
s:openInNewTab	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
s:openInNewTabSilent	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
s:openNodeRecursively	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
s:openVSplit	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
s:opfunc	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:opfunc(type) abort$/;"	f
s:option_values	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:option_values = {$/;"	v
s:output_response	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:output_response(response) abort$/;"	f
s:padding_left	vim_configurationfile/.vim/plugged/quickmenu.vim/syntax/quickmenu.vim	/^let s:padding_left = repeat(' ', get(g:, 'quickmenu_padding_left', 3))$/;"	v
s:parse_args	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_args(args)$/;"	f
s:parse_filter	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_filter(f)$/;"	f
s:parse_nth	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_nth(n)$/;"	f
s:parse_options	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_shorthand_opts	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_shorthand_opts(expr)$/;"	f
s:path	vim_configurationfile/.vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path_extract	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:path_extract(path)$/;"	f
s:piggieback	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:piggieback(arg, remove) abort$/;"	f
s:piggieback	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:piggieback = copy(s:repl)$/;"	v
s:piggieback.eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:piggieback.eval(expr, options) abort$/;"	f
s:piggieback.user_ns	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:piggieback.user_ns() abort$/;"	f
s:plug_buf	vim_configurationfile/.vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	vim_configurationfile/.vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	vim_configurationfile/.vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:prepare	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:previewBookmark	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark)$/;"	f
s:previewNodeCurrent	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
s:previewNodeHSplit	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
s:previewNodeVSplit	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
s:preview_commit	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:print_last	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:print_last() abort$/;"	f
s:printop	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:printop(type) abort$/;"	f
s:process	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:process(range, mode, n, ch, opts, regexp, rules, bvis)$/;"	f
s:process_options_file	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:process_stacktrace_entry	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^function! s:process_stacktrace_entry(entry) abort$/;"	f
s:progress_bar	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:promptToDelBuffer	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:protos	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:protos() abort$/;"	f
s:python	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^  let s:python = 1$/;"	v
s:python_dir	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^let s:python_dir = fnamemodify(expand("<sfile>"), ':p:h:h:h') . '\/python'$/;"	v
s:qfentry	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:qfentry(entry) abort$/;"	f
s:qffiles	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  let s:qffiles = {}$/;"	v
s:qfhistory	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:qfhistory() abort$/;"	f
s:qfmassage	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:qfmassage(line, path) abort$/;"	f
s:qsym	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:qsym(symbol) abort$/;"	f
s:quickmenu_cursor	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^let s:quickmenu_cursor = {}$/;"	v
s:quickmenu_header	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^let s:quickmenu_header = {}$/;"	v
s:quickmenu_items	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^let s:quickmenu_items = {}$/;"	v
s:quickmenu_line	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^let s:quickmenu_line = 0$/;"	v
s:quickmenu_mid	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^let s:quickmenu_mid = 0$/;"	v
s:quickmenu_name	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^let s:quickmenu_name = '[quickmenu]'$/;"	v
s:quickmenu_version	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^let s:quickmenu_version = 'QuickMenu 1.3.4'$/;"	v
s:read	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:read(str, pos) abort$/;"	f
s:read_token	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:read_token(str, pos) abort$/;"	f
s:reap	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:recall	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:recall() abort$/;"	f
s:refreshCurrent	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
s:refreshRoot	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot()$/;"	f
s:register_connection	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:register_connection(conn, ...) abort$/;"	f
s:regress_bar	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload_plugins	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remember_visual	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:remember_visual(mode)$/;"	f
s:remove_rtp	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:renameBuffer	vim_configurationfile/.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
s:reorg_rtp	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:repeat_in_visual	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:repeat_in_visual()$/;"	f
s:repeat_visual	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:repeat_visual()$/;"	f
s:repl	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:repl = {"requires": {}}$/;"	v
s:repl.eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:repl.eval(expr, options) dict abort$/;"	f
s:repl.message	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:repl.message(payload, ...) dict abort$/;"	f
s:repl.path	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:repl.path() dict abort$/;"	f
s:repl.piggieback	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:repl.piggieback(arg, ...) abort$/;"	f
s:repl.preload	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:repl.preload(lib) dict abort$/;"	f
s:repl.user_ns	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:repl.user_ns() abort$/;"	f
s:repl_ns	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:repl_ns(...) abort$/;"	f
s:repl_paths	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  let s:repl_paths = {}$/;"	v
s:repl_portfiles	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  let s:repl_portfiles = {}$/;"	v
s:repls	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^  let s:repls = []$/;"	v
s:retry	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:reuseWin	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:revert	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rtp	vim_configurationfile/.vim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:rtrim	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:rtrim(str)$/;"	f
s:runner_exe	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:section	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:select_by_ft	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:select_by_ft(mid, ft) abort$/;"	f
s:set_cursor	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:set_cursor() abort$/;"	f
s:set_repeat	vim_configurationfile/.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:set_repeat()$/;"	f
s:set_up_doc	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:set_up_doc() abort$/;"	f
s:set_up_eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:set_up_eval() abort$/;"	f
s:set_up_go_to_file	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:set_up_go_to_file() abort$/;"	f
s:set_up_historical	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:set_up_historical() abort$/;"	f
s:set_up_require	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:set_up_require() abort$/;"	f
s:set_up_source	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:set_up_source() abort$/;"	f
s:set_up_tests	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:set_up_tests() abort$/;"	f
s:setup_keymaps	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:setup_keymaps(items)$/;"	f
s:shellesc	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc_cmd	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shift	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:shift(modes, cycle)$/;"	f
s:shift_opts	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:shift_opts(opts, key, vals)$/;"	f
s:short_types	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:short_types = {$/;"	v
s:shorthand	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:shorthand = {$/;"	v
s:shorthand_regex	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:shorthand_regex =$/;"	v
s:showMenu	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node)$/;"	f
s:slash	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:slash() abort$/;"	f
s:slimit	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:slimit(text, limit, col)$/;"	f
s:snapshot	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:source	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:spawn	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:spawning_eval	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:spawning_eval(classpath, expr, ns) abort$/;"	f
s:split_line	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:split_line(line, nth, modes, cycle, fc, lc, pattern, stick_to_left, ignore_unmatched/;"	f
s:split_rtp	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:status	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:str	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:str(string) abort$/;"	f
s:strwidth	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^  function! s:strwidth(str)$/;"	f
s:summarize	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function s:summarize(opts, recur, mode_sequence)$/;"	f
s:switch_in	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:system	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^fu! s:system(str, ...)$/;"	f
s:system_chomp	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:temp_response	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:temp_response(response) abort$/;"	f
s:test_regexp	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:test_regexp(regexp)$/;"	f
s:tick	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:to_a	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_ns	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:to_ns(path) abort$/;"	f
s:to_s	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:toggleIgnoreFilter	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
s:toggleShowBookmarks	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
s:toggleShowFiles	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
s:toggleShowHidden	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
s:toggleZoom	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom()$/;"	f
s:token	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^let s:token = '^\\%(#"\\%(\\\\\\@<!\\%(\\\\\\\\\\)*\\\\"\\|[^"]\\)*"\\|"\\%(\\\\.\\|[^"]\\)*"\\|/;"	v
s:tree_up_dir_line	vim_configurationfile/.vim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:triggers	vim_configurationfile/.vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:trim(str)$/;"	f
s:unix_redir	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unregister_connection	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace.vim	/^function! s:unregister_connection(conn) abort$/;"	f
s:upDirCurrentRootClosed	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
s:upDirCurrentRootOpen	vim_configurationfile/.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
s:update	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_in_progress	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_lines	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:update_lines(todo)$/;"	f
s:update_python	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_queue	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_ruby	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_tags	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:update_vim	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:valid_regexp	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:valid_regexp(regexp)$/;"	f
s:validate_options	vim_configurationfile/.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:validate_options(opts)$/;"	f
s:version_requirement	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	vim_configurationfile/.vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_id	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl.vim	/^  let s:vim_id = localtime()$/;"	v
s:vim_id	vim_configurationfile/.vim/plugged/vim-fireplace/autoload/fireplace/nrepl_connection.vim	/^  let s:vim_id = localtime()$/;"	v
s:vim_system	vim_configurationfile/.vim/plugged/gocode/vim/autoload/gocomplete.vim	/^let s:vim_system = get(g:, 'gocomplete#system_function', 'system')$/;"	v
s:warn	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:wildignores_options_path	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:window_close	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:window_close()$/;"	f
s:window_exist	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:window_exist()$/;"	f
s:window_open	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:window_open(size)$/;"	f
s:window_render	vim_configurationfile/.vim/plugged/quickmenu.vim/autoload/quickmenu.vim	/^function! s:window_render(items, mid) abort$/;"	f
s:with_cd	vim_configurationfile/.vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:write_triggered_update_tags	vim_configurationfile/.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
scanner	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^	scanner   scanner.Scanner$/;"	m	struct:main.import_data_parser	typeref:typename:scanner.Scanner
scanner	vim_configurationfile/.vim/plugged/gocode/package.go	/^	scanner       scanner.Scanner$/;"	m	struct:main.gc_parser	typeref:typename:scanner.Scanner
scope	vim_configurationfile/.vim/plugged/gocode/autocompletefile.go	/^	scope     *scope$/;"	m	struct:main.auto_complete_file	typeref:typename:*scope
scope	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	scope *scope$/;"	m	struct:main.anonymous_typer	typeref:typename:*scope
scope	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	scope *scope$/;"	m	struct:main.decl	typeref:typename:*scope
scope	vim_configurationfile/.vim/plugged/gocode/package.go	/^	scope  *scope$/;"	m	struct:main.package_file_cache	typeref:typename:*scope
scope	vim_configurationfile/.vim/plugged/gocode/scope.go	/^type scope struct {$/;"	s	package:main
send	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^    def send(self, payload):$/;"	m	class:Connection
server_auto_complete	vim_configurationfile/.vim/plugged/gocode/server.go	/^func server_auto_complete(file []byte, filename string, cursor int, context_packed go_build_cont/;"	f	package:main	typeref:typename:(c []candidate, d int)
server_close	vim_configurationfile/.vim/plugged/gocode/server.go	/^func server_close(notused int) int {$/;"	f	package:main	typeref:typename:int
server_cursor_type_pkg	vim_configurationfile/.vim/plugged/gocode/server.go	/^func server_cursor_type_pkg(file []byte, filename string, cursor int) (typ, pkg string) {$/;"	f	package:main	typeref:typename:(typ, pkg string)
server_drop_cache	vim_configurationfile/.vim/plugged/gocode/server.go	/^func server_drop_cache(notused int) int {$/;"	f	package:main	typeref:typename:int
server_set	vim_configurationfile/.vim/plugged/gocode/server.go	/^func server_set(key, value string) string {$/;"	f	package:main	typeref:typename:string
server_status	vim_configurationfile/.vim/plugged/gocode/server.go	/^func server_status(notused int) string {$/;"	f	package:main	typeref:typename:string
set_option	vim_configurationfile/.vim/plugged/gocode/config.go	/^func (this *config) set_option(name, value string) string {$/;"	f	struct:main.config	typeref:typename:string
set_value	vim_configurationfile/.vim/plugged/gocode/config.go	/^func set_value(v reflect.Value, value string) {$/;"	f	package:main
shell32	vim_configurationfile/.vim/plugged/gocode/os_windows.go	/^	shell32  = syscall.NewLazyDLL("shell32.dll")$/;"	v	package:main
show_usage	vim_configurationfile/.vim/plugged/gocode/gocode.go	/^func show_usage() {$/;"	f	package:main
skip_to_bracket_pair	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (this *token_iterator) skip_to_bracket_pair() bool {$/;"	f	struct:main.token_iterator	typeref:typename:bool
skip_to_left_bracket	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (this *token_iterator) skip_to_left_bracket(left, right token.Token) bool {$/;"	f	struct:main.token_iterator	typeref:typename:bool
skip_to_open_brace	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (this *token_iterator) skip_to_open_brace() bool {$/;"	f	struct:main.token_iterator	typeref:typename:bool
smallest_builtin_code	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^	smallest_builtin_code = -21$/;"	c	package:main
split_flags	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^def split_flags(line):$/;"	f
star_predicate	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func star_predicate(v ast.Expr) bool {$/;"	f	package:main	typeref:typename:bool
status	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) status() string {$/;"	f	struct:main.auto_complete_context	typeref:typename:string
strip_method_receiver	vim_configurationfile/.vim/plugged/gocode/package.go	/^func strip_method_receiver(recv *ast.FieldList) string {$/;"	f	package:main	typeref:typename:string
struct_interface_predicate	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func struct_interface_predicate(v ast.Expr) bool {$/;"	f	package:main	typeref:typename:bool
struct_members_only	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func struct_members_only(decl *decl) *decl {$/;"	f	package:main	typeref:typename:*decl
superos	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/b.go	/^	superos "os"$/;"	P	package:os
superos	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/b.go	/^	superos "os"$/;"	P	package:os
t	vim_configurationfile/.vim/plugged/gocode/_testing/test.0049/test.go.in	/^func t(a struct {$/;"	f	package:p
t	vim_configurationfile/.vim/plugged/gocode/_testing/test.0050/test.go.in	/^func t(a *struct {$/;"	f	package:p
test	vim_configurationfile/.vim/plugged/gocode/_testing/test.0002/test.go.in	/^var test map[string]os.Error$/;"	v	package:main	typeref:typename:map[string]os.Error
test	vim_configurationfile/.vim/plugged/gocode/_testing/test.0005/test.go.in	/^var test = B()$/;"	v	package:main
test	vim_configurationfile/.vim/plugged/gocode/_testing/test.0006/test.go.in	/^var test = B()$/;"	v	package:main
test	vim_configurationfile/.vim/plugged/gocode/_testing/test.0034/test.go.in	/^func test() {$/;"	f	package:main
testEllipsis	vim_configurationfile/.vim/plugged/gocode/_testing/test.0033/test.go.in	/^func testEllipsis(dummies ...*Dummy) {$/;"	f	package:main
tmpbuf	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	tmpbuf     *bytes.Buffer$/;"	m	struct:main.out_buffers	typeref:typename:*bytes.Buffer
tmpns	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^	tmpns      map[string]bool$/;"	m	struct:main.out_buffers	typeref:typename:map[string]bool
tok	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^	tok token.Token$/;"	m	struct:main.token_item	typeref:typename:token.Token
tok	vim_configurationfile/.vim/plugged/gocode/package.go	/^	tok           rune$/;"	m	struct:main.gc_parser	typeref:typename:rune
tok	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^	tok token.Token$/;"	m	struct:main.tok_pos_pair	typeref:typename:token.Token
tok_collection	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^type tok_collection struct {$/;"	s	package:main
tok_pos_pair	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^type tok_pos_pair struct {$/;"	s	package:main
token	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^func (this *import_data_parser) token() string {$/;"	f	struct:main.import_data_parser	typeref:typename:string
token	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (this *token_iterator) token() token_item {$/;"	f	struct:main.token_iterator	typeref:typename:token_item
token_index	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^	token_index int$/;"	m	struct:main.token_iterator	typeref:typename:int
token_item	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^type token_item struct {$/;"	s	package:main
token_iterator	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^type token_iterator struct {$/;"	s	package:main
tokens	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^	tokens      []token_item$/;"	m	struct:main.token_iterator	typeref:typename:[]token_item
tokens	vim_configurationfile/.vim/plugged/gocode/ripper.go	/^	tokens []tok_pos_pair$/;"	m	struct:main.tok_collection	typeref:typename:[]tok_pos_pair
toktype	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^	toktype   rune$/;"	m	struct:main.import_data_parser	typeref:typename:rune
total	vim_configurationfile/.vim/plugged/gocode/_testing/run.py	/^total = 0$/;"	v
try_extract_struct_init_expr	vim_configurationfile/.vim/plugged/gocode/cursorcontext.go	/^func (this *token_iterator) try_extract_struct_init_expr() []byte {$/;"	f	struct:main.token_iterator	typeref:typename:[]byte
try_run_server	vim_configurationfile/.vim/plugged/gocode/client.go	/^func try_run_server() error {$/;"	f	package:main	typeref:typename:error
try_to_connect	vim_configurationfile/.vim/plugged/gocode/client.go	/^func try_to_connect(network, address string) (client *rpc.Client, err error) {$/;"	f	package:main	typeref:typename:(client *rpc.Client, err error)
typ	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	typ    ast.Expr$/;"	m	struct:main.decl_pack	typeref:typename:ast.Expr
typ	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	typ   ast.Expr$/;"	m	struct:main.decl	typeref:typename:ast.Expr
type_	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^	type_ ast.Expr$/;"	m	struct:main.import_data_type	typeref:typename:ast.Expr
type_path	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type type_path struct {$/;"	s	package:main
type_predicate	vim_configurationfile/.vim/plugged/gocode/decl.go	/^type type_predicate func(ast.Expr) bool$/;"	t	package:main	typeref:typename:func(ast.Expr) bool
type_to_decl	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func type_to_decl(t ast.Expr, scope *scope) *decl {$/;"	f	package:main	typeref:typename:*decl
type_value_index	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (f *decl_pack) type_value_index(i int) (ast.Expr, ast.Expr, int) {$/;"	f	struct:main.decl_pack	typeref:typename:(ast.Expr, ast.Expr, int)
typetable	vim_configurationfile/.vim/plugged/gocode/_gccgo/package.go	/^	typetable []*import_data_type$/;"	m	struct:main.import_data_parser	typeref:typename:[]*import_data_type
unbalanced_quotes	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^def unbalanced_quotes(s):$/;"	f
unpack_build_context	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func unpack_build_context(ctx *go_build_context) build.Context {$/;"	f	package:main	typeref:typename:build.Context
update	vim_configurationfile/.vim/plugged/gocode/declcache.go	/^func (f *decl_file_cache) update() {$/;"	f	struct:main.decl_file_cache
update_cache	vim_configurationfile/.vim/plugged/gocode/package.go	/^func (m *package_file_cache) update_cache() {$/;"	f	struct:main.package_file_cache
update_caches	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func (c *auto_complete_context) update_caches() {$/;"	f	struct:main.auto_complete_context
update_packages	vim_configurationfile/.vim/plugged/gocode/autocompletecontext.go	/^func update_packages(ps map[string]*package_file_cache) {$/;"	f	package:main
use_raw_list	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	vim_configurationfile/.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
value	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	value ast.Expr$/;"	m	struct:main.decl	typeref:typename:ast.Expr
value	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (f *decl_pack) value(i int) ast.Expr {$/;"	f	struct:main.decl_pack	typeref:typename:ast.Expr
value_and_type	vim_configurationfile/.vim/plugged/gocode/config.go	/^func (this *config) value_and_type() (reflect.Value, reflect.Type) {$/;"	f	struct:main.config	typeref:typename:(reflect.Value, reflect.Type)
value_index	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	value_index int$/;"	m	struct:main.decl	typeref:typename:int
value_index	vim_configurationfile/.vim/plugged/gocode/decl.go	/^func (f *decl_pack) value_index(i int) (v ast.Expr, vi int) {$/;"	f	struct:main.decl_pack	typeref:typename:(v ast.Expr, vi int)
values	vim_configurationfile/.vim/plugged/gocode/decl.go	/^	values []ast.Expr$/;"	m	struct:main.decl_pack	typeref:typename:[]ast.Expr
vim	vim_configurationfile/.vim/plugged/gocode/docs/autocomplete_formats.md	/^## vim ##$/;"	s
vim-easy-align ![travis-ci](https://travis-ci.org/junegunn/vim-easy-align.svg?branch=master)	vim_configurationfile/.vim/plugged/vim-easy-align/README.md	/^vim-easy-align ![travis-ci](https:\/\/travis-ci.org\/junegunn\/vim-easy-align.svg?branch=master)$/;"	c
vim_encode	vim_configurationfile/.vim/plugged/vim-fireplace/python/nrepl_fireplace.py	/^def vim_encode(data):$/;"	f
vim_formatter	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^type vim_formatter struct{}$/;"	s	package:main
wrap_function	vim_configurationfile/.vim/plugged/gocode/_goremote/goremote.go	/^func wrap_function(out io.Writer, fun *ast.FuncDecl) {$/;"	f	package:main
write	vim_configurationfile/.vim/plugged/gocode/config.go	/^func (this *config) write() error {$/;"	f	struct:main.config	typeref:typename:error
write_candidates	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^	write_candidates(candidates []candidate, num int)$/;"	n	interface:main.formatter
write_candidates	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^func (*csv_formatter) write_candidates(candidates []candidate, num int) {$/;"	f	struct:main.csv_formatter
write_candidates	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^func (*emacs_formatter) write_candidates(candidates []candidate, num int) {$/;"	f	struct:main.emacs_formatter
write_candidates	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^func (*godit_formatter) write_candidates(candidates []candidate, num int) {$/;"	f	struct:main.godit_formatter
write_candidates	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^func (*json_formatter) write_candidates(candidates []candidate, num int) {$/;"	f	struct:main.json_formatter
write_candidates	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^func (*nice_formatter) write_candidates(candidates []candidate, num int) {$/;"	f	struct:main.nice_formatter
write_candidates	vim_configurationfile/.vim/plugged/gocode/formatters.go	/^func (*vim_formatter) write_candidates(candidates []candidate, num int) {$/;"	f	struct:main.vim_formatter
xdg_home_dir	vim_configurationfile/.vim/plugged/gocode/utils.go	/^func xdg_home_dir() string {$/;"	f	package:main	typeref:typename:string
ycm_generator_dir	vim_configurationfile/.vim/plugged/YCM-Generator/config_gen.py	/^ycm_generator_dir = os.path.dirname(os.path.realpath(__file__))$/;"	v
zip#Read	vim_configurationfile/.vim/plugged/vim-fireplace/plugin/fireplace/zip.vim	/^fun! zip#Read(fname,mode)$/;"	f
}	vim_configurationfile/.vim/plugged/gocode/docs/IDE_integration.md	/^}$/;"	s
ъ	vim_configurationfile/.vim/plugged/gocode/_testing/test.0023/test.go.in	/^import ъ "fmt"$/;"	P	package:fmt
